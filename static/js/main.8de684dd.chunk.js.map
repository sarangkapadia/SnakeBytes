{"version":3,"sources":["grid.ts","button.tsx","byte.tsx","byteList.ts","bytes.ts","snake.ts","box.tsx","gridRenderer.tsx","debug/debugBox.tsx","debug/debugGrid.tsx","wordtiles.tsx","gridContainer.tsx","useInterval.tsx","title.tsx","header.tsx","App.tsx","index.tsx"],"names":["Direction","Role","Button","React","memo","props","className","onClick","label","Byte","letter","byteList","Bytes","index","this","length","Snake","snakeEnds","tail","row","col","head","GridItem","role","Canvas","direction","None","pivot","Grid","grid","gridSize","snake","bytes","currentBytes","letterIndex","root","document","querySelector","rootStyle","getComputedStyle","parseInt","getPropertyValue","Array","i","j","getSnakeEnds","Tail","Head","Body","Error","setRandomBytePositions","getNextWord","randomRow","Math","floor","random","randomCol","charAt","toUpperCase","console","log","expected","Box","currentHeadDirection","currentTailDirection","currentTailPivot","getClassNameFromDirection","dir","Down","Up","Left","Right","getClassName","GridRenderer","flat","map","item","id","getStringRole","getStringDirection","DebugBox","DebugGrid","WordTiles","tickCount","tickCountMs","parseFloat","substr","url","URL","window","location","href","urlSearchParams","URLSearchParams","search","gridObj","initGridData","getGridSize","getGrid","GridContainer","useState","getSnake","setSnakeEnds","playing","setPlaying","debug","setDebug","calculateNewTail","ends","currentHeadRow","currentHeadCol","isHeadOnByte","currentTailRow","currentTailCol","pivotDir","currentTailDir","getCurrentTailDirection","newTailRow","newTailCol","getNewEnds","currentHeadDir","getCurrentHeadDirection","newHeadRow","newHeadCol","getExpectedLetter","landed","calculateNewHead","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","setInterval","clearInterval","useInterval","newEnds","handleOnPlayPauseGame","useCallback","setCurrentTailDirection","setCurrentHeadDirection","handleOnDebug","handlers","useSwipeable","onSwipedLeft","setPivotOnCurrentHeadDirection","onSwipedRight","onSwipedDown","onSwipedUp","preventDefaultTouchmoveEvent","trackMouse","getPivotDirectionOnCurrentTail","get","Title","Header","style","margin","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8de684dd.chunk.js","sourcesContent":["import { byteList } from \"./byteList\";\nimport { Bytes } from \"./bytes\";\nimport { Snake } from \"./snake\";\n\nexport enum Direction {\n  None,\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nexport enum Role {\n  Canvas,\n  Body,\n  Head,\n  Tail,\n  Byte,\n}\n\nexport interface IGridItem {\n  role: Role;\n  direction: Direction;\n  pivot: Direction;\n  letter: string;\n}\n\nclass GridItem implements IGridItem {\n  role = Role.Canvas;\n  direction = Direction.None;\n  pivot = Direction.None;\n  letter = \"\";\n}\n\nexport class Grid {\n  private grid: GridItem[][];\n  private gridSize: number;\n  private snake: Snake; // Grid contains a Snake\n\n  private bytes: Bytes; // Grid contains Bytes\n  private currentBytes: string = \"snake\";\n  private letterIndex: number = 0;\n\n  public constructor() {\n    const root = document.querySelector(\":root\")!;\n    const rootStyle = getComputedStyle(root);\n    this.gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\n    this.bytes = new Bytes(byteList);\n\n    this.grid = new Array(this.gridSize);\n    for (let i = 0; i < this.gridSize; i++) {\n      this.grid[i] = new Array(this.gridSize);\n    }\n\n    for (let i = 0; i < this.gridSize; i++) {\n      for (let j = 0; j < this.gridSize; j++) {\n        this.grid[i][j] = new GridItem();\n      }\n    }\n\n    this.snake = new Snake();\n  }\n\n  public getGrid(): GridItem[][] {\n    return this.grid;\n  }\n\n  public getGridSize(): number {\n    return this.gridSize;\n  }\n\n  public getSnake(): Snake {\n    return this.snake;\n  }\n\n  public getCurrentHeadDirection(): Direction {\n    const { head } = this.snake.getSnakeEnds();\n    return this.grid[head.row][head.col].direction;\n  }\n\n  public getCurrentTailDirection(): Direction {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].direction;\n  }\n\n  public setCurrentHeadDirection(direction: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].direction = direction;\n  }\n\n  public getPivotDirectionOnCurrentTail() {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].pivot;\n  }\n\n  public setCurrentTailDirection(direction: Direction) {\n    const { tail } = this.snake.getSnakeEnds();\n    this.grid[tail.row][tail.col].direction = direction;\n  }\n\n  setPivotOnCurrentHeadDirection(pivot: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].pivot = pivot;\n  }\n\n  public initGridData() {\n    const { tail, head } = this.snake.getSnakeEnds();\n\n    this.grid[tail.row][tail.col].direction = Direction.None;\n    this.grid[head.row][head.col].direction = Direction.None;\n\n    this.grid[tail.row][tail.col].role = Role.Tail;\n    this.grid[head.row][head.col].role = Role.Head;\n\n    if (tail.row === head.row) {\n      // horizontal snake\n      for (let i = tail.col + 1; i < head.col; i++) {\n        this.grid[tail.row][i].role = Role.Body;\n        this.grid[head.row][i].role = Role.Body;\n      }\n    } else if (tail.col === head.col) {\n      // vertical snake\n      for (let i = tail.row + 1; i < head.row; i++) {\n        this.grid[i][tail.col].role = Role.Body;\n        this.grid[i][tail.col].role = Role.Body;\n      }\n    } else {\n      throw new Error(\"Snake init invalid\");\n    }\n\n    this.setRandomBytePositions();\n  }\n\n  // sprinkles the next word on the grid\n  public setRandomBytePositions() {\n    this.currentBytes = this.bytes.getNextWord();\n    for (let i = 0; i < this.currentBytes.length; i++) {\n      do {\n        let randomRow = Math.floor(Math.random() * this.gridSize);\n        let randomCol = Math.floor(Math.random() * this.gridSize);\n\n        if (this.grid[randomRow][randomCol].role === Role.Canvas) {\n          this.grid[randomRow][randomCol].role = Role.Byte;\n          this.grid[randomRow][randomCol].letter = this.currentBytes\n            .charAt(i)\n            .toUpperCase();\n          break;\n        } else {\n          console.log(\"Invalid random position\");\n        }\n      } while (1);\n    }\n  }\n\n  public getExpectedLetter(): string {\n    const expected = this.currentBytes.charAt(this.letterIndex);\n    this.letterIndex = (this.letterIndex + 1) % this.currentBytes.length;\n    return expected;\n  }\n} // end of grid\n","import React from \"react\";\nimport \"./style/button.css\";\n\ninterface IButtonProps {\n  onClick: () => void;\n  label: string;\n}\n\nexport const Button: React.FunctionComponent<IButtonProps> = React.memo(\n  (props) => {\n    return (\n      <button className={\"newGame\"} onClick={props.onClick}>\n        {props.label}\n      </button>\n    );\n  }\n);\n","import React from \"react\";\nimport \"./style/byte.css\";\n\ninterface IByteProps {\n  letter: string;\n}\nexport const Byte: React.FunctionComponent<IByteProps> = React.memo((props) => {\n  const { letter } = props;\n  return <div className=\"byte\">{letter}</div>;\n});\n","export const byteList: string[] = [\n  \"about\",\n  \"above\",\n  \"abuse\",\n  \"actor\",\n  \"acute\",\n  \"admit\",\n  \"adopt\",\n  \"adult\",\n  \"after\",\n  \"again\",\n  \"agent\",\n  \"agree\",\n  \"ahead\",\n  \"alarm\",\n  \"album\",\n  \"alert\",\n  \"alike\",\n  \"alive\",\n  \"allow\",\n  \"alone\",\n  \"along\",\n  \"alter\",\n  \"among\",\n  \"anger\",\n  \"Angle\",\n  \"angry\",\n  \"apart\",\n  \"apple\",\n  \"apply\",\n  \"arena\",\n  \"argue\",\n  \"arise\",\n  \"array\",\n  \"aside\",\n  \"asset\",\n  \"audio\",\n  \"audit\",\n  \"avoid\",\n  \"award\",\n  \"aware\",\n  \"badly\",\n  \"baker\",\n  \"bases\",\n  \"basic\",\n  \"basis\",\n  \"beach\",\n  \"began\",\n  \"begin\",\n  \"begun\",\n  \"being\",\n  \"below\",\n  \"bench\",\n  \"billy\",\n  \"birth\",\n  \"black\",\n  \"blame\",\n  \"blind\",\n  \"block\",\n  \"blood\",\n  \"board\",\n  \"boost\",\n  \"booth\",\n  \"bound\",\n  \"brain\",\n  \"brand\",\n  \"bread\",\n  \"break\",\n  \"breed\",\n  \"brief\",\n  \"bring\",\n  \"broad\",\n  \"broke\",\n  \"brown\",\n  \"build\",\n  \"built\",\n  \"buyer\",\n  \"cable\",\n  \"calif\",\n  \"carry\",\n  \"catch\",\n  \"cause\",\n  \"chain\",\n  \"chair\",\n  \"chart\",\n  \"chase\",\n  \"cheap\",\n  \"check\",\n  \"chest\",\n  \"chief\",\n  \"child\",\n  \"china\",\n  \"chose\",\n  \"civil\",\n  \"claim\",\n  \"class\",\n  \"clean\",\n  \"clear\",\n  \"click\",\n  \"clock\",\n  \"close\",\n  \"coach\",\n  \"coast\",\n  \"could\",\n  \"count\",\n  \"court\",\n  \"cover\",\n  \"craft\",\n  \"crash\",\n  \"cream\",\n  \"crime\",\n  \"cross\",\n  \"crowd\",\n  \"crown\",\n  \"curve\",\n  \"cycle\",\n  \"daily\",\n  \"dance\",\n  \"dated\",\n  \"dealt\",\n  \"death\",\n  \"debut\",\n  \"delay\",\n  \"depth\",\n  \"doing\",\n  \"doubt\",\n  \"dozen\",\n  \"draft\",\n  \"drama\",\n  \"drawn\",\n  \"dream\",\n  \"dress\",\n  \"drill\",\n  \"drink\",\n  \"drive\",\n  \"drove\",\n  \"dying\",\n  \"eager\",\n  \"early\",\n  \"earth\",\n  \"eight\",\n  \"elite\",\n  \"empty\",\n  \"enemy\",\n  \"enjoy\",\n  \"enter\",\n  \"entry\",\n  \"equal\",\n  \"error\",\n  \"event\",\n  \"every\",\n  \"exact\",\n  \"exist\",\n  \"extra\",\n  \"faith\",\n  \"false\",\n  \"fault\",\n  \"fiber\",\n  \"field\",\n  \"fifth\",\n  \"fifty\",\n  \"fight\",\n  \"final\",\n  \"first\",\n  \"fixed\",\n  \"flash\",\n  \"fleet\",\n  \"floor\",\n  \"fluid\",\n  \"focus\",\n  \"force\",\n  \"forth\",\n  \"forty\",\n  \"forum\",\n  \"found\",\n  \"frame\",\n  \"frank\",\n  \"fraud\",\n  \"fresh\",\n  \"front\",\n  \"fruit\",\n  \"fully\",\n  \"funny\",\n  \"giant\",\n  \"given\",\n  \"glass\",\n  \"globe\",\n  \"going\",\n  \"grace\",\n  \"grade\",\n  \"grand\",\n  \"grant\",\n  \"grass\",\n  \"great\",\n  \"green\",\n  \"gross\",\n  \"group\",\n  \"grown\",\n  \"guard\",\n  \"guess\",\n  \"guest\",\n  \"guide\",\n  \"happy\",\n  \"harry\",\n  \"heart\",\n  \"heavy\",\n  \"hence\",\n  \"henry\",\n  \"horse\",\n  \"hotel\",\n  \"house\",\n  \"human\",\n  \"ideal\",\n  \"image\",\n  \"index\",\n  \"inner\",\n  \"input\",\n  \"issue\",\n  \"japan\",\n  \"jimmy\",\n  \"joint\",\n  \"jones\",\n  \"judge\",\n  \"known\",\n  \"label\",\n  \"large\",\n  \"laser\",\n  \"later\",\n  \"laugh\",\n  \"layer\",\n  \"learn\",\n  \"lease\",\n  \"least\",\n  \"leave\",\n  \"legal\",\n  \"level\",\n  \"lewis\",\n  \"light\",\n  \"limit\",\n  \"links\",\n  \"lives\",\n  \"local\",\n  \"logic\",\n  \"loose\",\n  \"lower\",\n  \"lucky\",\n  \"lunch\",\n  \"lying\",\n  \"magic\",\n  \"major\",\n  \"maker\",\n  \"march\",\n  \"maria\",\n  \"match\",\n  \"maybe\",\n  \"mayor\",\n  \"meant\",\n  \"media\",\n  \"metal\",\n  \"might\",\n  \"minor\",\n  \"minus\",\n  \"mixed\",\n  \"model\",\n  \"money\",\n  \"month\",\n  \"moral\",\n  \"motor\",\n  \"mount\",\n  \"mouse\",\n  \"mouth\",\n  \"movie\",\n  \"music\",\n  \"needs\",\n  \"never\",\n  \"newly\",\n  \"night\",\n  \"noise\",\n  \"north\",\n  \"noted\",\n  \"novel\",\n  \"nurse\",\n  \"occur\",\n  \"ocean\",\n  \"offer\",\n  \"often\",\n  \"order\",\n  \"other\",\n  \"ought\",\n  \"paint\",\n  \"panel\",\n  \"paper\",\n  \"party\",\n  \"peace\",\n  \"peter\",\n  \"phase\",\n  \"phone\",\n  \"photo\",\n  \"piece\",\n  \"pilot\",\n  \"pitch\",\n  \"place\",\n  \"plain\",\n  \"plane\",\n  \"plant\",\n  \"plate\",\n  \"point\",\n  \"pound\",\n  \"power\",\n  \"press\",\n  \"price\",\n  \"pride\",\n  \"prime\",\n  \"print\",\n  \"prior\",\n  \"prize\",\n  \"proof\",\n  \"proud\",\n  \"prove\",\n  \"queen\",\n  \"quick\",\n  \"quiet\",\n  \"quite\",\n  \"radio\",\n  \"raise\",\n  \"range\",\n  \"rapid\",\n  \"ratio\",\n  \"reach\",\n  \"ready\",\n  \"refer\",\n  \"right\",\n  \"rival\",\n  \"river\",\n  \"robin\",\n  \"roger\",\n  \"roman\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"royal\",\n  \"rural\",\n  \"scale\",\n  \"scene\",\n  \"scope\",\n  \"score\",\n  \"sense\",\n  \"serve\",\n  \"seven\",\n  \"shall\",\n  \"shape\",\n  \"share\",\n  \"sharp\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shift\",\n  \"shirt\",\n  \"shock\",\n  \"shoot\",\n  \"short\",\n  \"shown\",\n  \"sight\",\n  \"since\",\n  \"sixth\",\n  \"sixty\",\n  \"sized\",\n  \"skill\",\n  \"sleep\",\n  \"slide\",\n  \"small\",\n  \"smart\",\n  \"smile\",\n  \"smith\",\n  \"smoke\",\n  \"solid\",\n  \"solve\",\n  \"sorry\",\n  \"sound\",\n  \"south\",\n  \"space\",\n  \"spare\",\n  \"speak\",\n  \"speed\",\n  \"spend\",\n  \"spent\",\n  \"split\",\n  \"spoke\",\n  \"sport\",\n  \"staff\",\n  \"stage\",\n  \"stake\",\n  \"stand\",\n  \"start\",\n  \"state\",\n  \"steam\",\n  \"steel\",\n  \"stick\",\n  \"still\",\n  \"stock\",\n  \"stone\",\n  \"stood\",\n  \"store\",\n  \"storm\",\n  \"story\",\n  \"strip\",\n  \"stuck\",\n  \"study\",\n  \"stuff\",\n  \"style\",\n  \"sugar\",\n  \"suite\",\n  \"super\",\n  \"sweet\",\n  \"table\",\n  \"taken\",\n  \"taste\",\n  \"taxes\",\n  \"teach\",\n  \"teeth\",\n  \"terry\",\n  \"texas\",\n  \"thank\",\n  \"theft\",\n  \"their\",\n  \"theme\",\n  \"there\",\n  \"these\",\n  \"thick\",\n  \"thing\",\n  \"think\",\n  \"third\",\n  \"those\",\n  \"three\",\n  \"threw\",\n  \"throw\",\n  \"tight\",\n  \"times\",\n  \"tired\",\n  \"title\",\n  \"today\",\n  \"topic\",\n  \"total\",\n  \"touch\",\n  \"tough\",\n  \"tower\",\n  \"track\",\n  \"trade\",\n  \"train\",\n  \"treat\",\n  \"trend\",\n  \"trial\",\n  \"tried\",\n  \"tries\",\n  \"truck\",\n  \"truly\",\n  \"trust\",\n  \"truth\",\n  \"twice\",\n  \"under\",\n  \"undue\",\n  \"union\",\n  \"unity\",\n  \"until\",\n  \"upper\",\n  \"upset\",\n  \"urban\",\n  \"usage\",\n  \"usual\",\n  \"valid\",\n  \"value\",\n  \"video\",\n  \"virus\",\n  \"visit\",\n  \"vital\",\n  \"voice\",\n  \"waste\",\n  \"watch\",\n  \"water\",\n  \"wheel\",\n  \"where\",\n  \"which\",\n  \"while\",\n  \"white\",\n  \"whole\",\n  \"whose\",\n  \"woman\",\n  \"women\",\n  \"world\",\n  \"worry\",\n  \"worse\",\n  \"worst\",\n  \"worth\",\n  \"would\",\n  \"wound\",\n  \"write\",\n  \"wrong\",\n  \"wrote\",\n  \"yield\",\n  \"young\",\n  \"youth\",\n];\n","export class Bytes {\n  private byteList: string[] = [];\n  private index: number = 0;\n\n  public constructor(byteList: string[], index?: number) {\n    this.byteList = byteList;\n    this.index = index ? index : 0;\n  }\n\n  public getNextWord(): string {\n    const index = this.index + 1 < this.byteList.length ? this.index + 1 : 0;\n    return this.byteList[index];\n  }\n}\n","// Snake metadata\n\nexport interface ISnakeEnds {\n  tail: { row: number; col: number };\n  head: { row: number; col: number };\n}\n\nexport class Snake {\n  private snakeEnds: ISnakeEnds;\n\n  public constructor(snakeEnds?: ISnakeEnds) {\n    if (snakeEnds) {\n      this.snakeEnds = snakeEnds;\n      return;\n    }\n\n    this.snakeEnds = {\n      tail: { row: 5, col: 5 },\n      head: { row: 5, col: 10 },\n    };\n  }\n\n  public getSnakeEnds(): ISnakeEnds {\n    return this.snakeEnds;\n  }\n\n  public setSnakeEnds(snakeEnds: ISnakeEnds): void {\n    this.snakeEnds = snakeEnds;\n  }\n\n  public snakeAlive(): boolean {\n    // TBD check if the snake head is not collided with a body/tail\n    return true;\n  }\n\n  public snakeLength(): number {\n    // TBD - return the number of grid locations\n    return 4;\n  }\n}\n","import React from \"react\";\nimport { Byte } from \"./byte\";\nimport { Direction, Role } from \"./grid\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  role: Role;\n  letter: string;\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  const {\n    role,\n    letter,\n    currentHeadDirection,\n    currentTailDirection,\n    currentTailPivot,\n  } = props;\n\n  const getClassNameFromDirection = (dir: Direction) => {\n    switch (dir) {\n      case Direction.Down:\n        return \"t2b\";\n      case Direction.Up:\n        return \"b2t\";\n      case Direction.Left:\n        return \"r2l\";\n      case Direction.Right:\n        return \"l2r\";\n      case Direction.None:\n        return \"none\";\n      default:\n        throw new Error(\"invalid dir\");\n    }\n  };\n\n  const getClassName = (): string => {\n    switch (role) {\n      case Role.Canvas:\n        return \"box\";\n      case Role.Head:\n        return `head_${getClassNameFromDirection(currentHeadDirection)}`;\n      case Role.Body:\n        return \"snake\";\n      case Role.Tail:\n        return `tail_${getClassNameFromDirection(\n          currentTailPivot !== Direction.None\n            ? currentTailPivot\n            : currentTailDirection\n        )}`;\n      case Role.Byte:\n        return \"food\";\n      default:\n        throw new Error(\"invalid role\");\n    }\n  };\n\n  let className = getClassName();\n\n  return className === \"food\" ? (\n    <div className={className}>\n      <Byte letter={letter} />\n    </div>\n  ) : (\n    <div className={className}></div>\n  );\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction, IGridItem } from \"./grid\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: IGridItem[][];\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentHeadDirection, currentTailDirection, currentTailPivot } =\n    props;\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((item, index) => (\n        <Box\n          role={item.role}\n          letter={item.letter}\n          id={index}\n          key={index}\n          currentHeadDirection={currentHeadDirection}\n          currentTailDirection={currentTailDirection}\n          currentTailPivot={currentTailPivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import { IGridItem, Role, Direction } from \"../grid\";\nimport \"../style/debug/debugBox.css\";\n\nconst getStringRole = (role: Role): string => {\n  switch (role) {\n    case Role.Body:\n      return \"b \";\n    case Role.Head:\n      return \"h \";\n    case Role.Tail:\n      return \"t \";\n    case Role.Canvas:\n      return \"c \";\n    case Role.Byte:\n      return \"f \";\n    default:\n      throw new Error(\"invalid role\");\n  }\n};\n\nconst getStringDirection = (direction: Direction): string => {\n  switch (direction) {\n    case Direction.Down:\n      return \"d \";\n    case Direction.Up:\n      return \"u \";\n    case Direction.Left:\n      return \"l \";\n    case Direction.Right:\n      return \"r \";\n    case Direction.None:\n      return \"n \";\n    default:\n      throw new Error(\"invalid direction\");\n  }\n};\n\nexport const DebugBox: React.FunctionComponent<IGridItem> = (props) => {\n  const { role, direction, pivot } = props;\n  return (\n    <div className={\"debugBox\"}>\n      {role > 0 ? getStringRole(role) : null}\n      {direction > 0 ? getStringDirection(direction) : null}\n      {role > 0 ? getStringDirection(pivot).toUpperCase() : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DebugBox } from \"./debugBox\";\nimport { IGridItem } from \"../grid\";\n\nimport \"../style/debug/debugGrid.css\";\n\ninterface IDebugGridProps {\n  grid: IGridItem[][];\n}\n\nexport const DebugGrid: React.FunctionComponent<IDebugGridProps> = (props) => {\n  const { grid } = props;\n  return (\n    <div className={\"debugGrid\"}>\n      {grid.flat().map((item, index) => (\n        <DebugBox\n          key={index}\n          role={item.role}\n          letter={item.letter}\n          direction={item.direction}\n          pivot={item.pivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import \"./style/wordTiles.css\";\n\nexport const WordTiles: React.FunctionComponent = () => {\n  return <div className=\"wordTilesContainer\">SNAKE</div>;\n};\n","import React, { useCallback, useState } from \"react\";\nimport { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { Grid, Direction, Role } from \"./grid\";\nimport { DebugGrid } from \"./debug/debugGrid\";\nimport \"./style/gridContainer.css\";\nimport { WordTiles } from \"./wordtiles\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst tickCount = rootStyle.getPropertyValue(\"--tick\");\nconst tickCountMs =\n  parseFloat(tickCount.substr(0, tickCount.length - 1)) * 1000;\n\nconst url: URL = new URL(window.location.href);\nconst urlSearchParams = new URLSearchParams(url.search);\n\nconst gridObj = new Grid();\ngridObj.initGridData();\n\nconst gridSize = gridObj.getGridSize();\nconst grid = gridObj.getGrid();\n\nexport const GridContainer: React.FunctionComponent = () => {\n  const [snakeEnds, setSnakeEnds] = useState(gridObj.getSnake().getSnakeEnds());\n  const [playing, setPlaying] = useState(false);\n  const [debug, setDebug] = useState(false);\n\n  // add logic in these to detect game end\n  const onSwipedLeft = () => {\n    if (!playing) return;\n\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Left);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Left);\n  };\n\n  const onSwipedRight = () => {\n    if (!playing) return;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Right);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Right);\n  };\n\n  const onSwipedUp = () => {\n    if (!playing) return;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Up);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Up);\n  };\n\n  const onSwipedDown = () => {\n    if (!playing) return;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Down);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Down);\n  };\n\n  const calculateNewHead = (ends: typeof snakeEnds) => {\n    /* ========================= HEAD ==============================*/\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n\n    grid[currentHeadRow][currentHeadCol].role = Role.Body; // make current head -> snake body\n    grid[currentHeadRow][currentHeadCol].direction = Direction.None; // make current head's dir none\n\n    // now calculate the new position (row, col) for head based on the current head direction.\n    let newHeadRow = currentHeadRow;\n    let newHeadCol = currentHeadCol;\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newHeadRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newHeadRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newHeadCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newHeadCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        throw new Error(\"Invalid head direction!\");\n      }\n    }\n    ends.head.row = newHeadRow;\n    ends.head.col = newHeadCol;\n\n    // check if new Head is a valid role\n    switch (grid[newHeadRow][newHeadCol].role) {\n      case Role.Canvas: {\n        grid[newHeadRow][newHeadCol].role = Role.Head; // canvas -> head'\n        break;\n      }\n      case Role.Byte: {\n        console.log(\"Byte found!\");\n        const expected = gridObj.getExpectedLetter().toUpperCase();\n        const landed = grid[newHeadRow][newHeadCol].letter;\n        if (landed !== expected)\n          throw new Error(\n            `Wrong letter, expected = ${expected}, letter = ${landed}`\n          );\n        break;\n      }\n      default:\n        setPlaying(false);\n        throw new Error(\"Head collision with invalid role\");\n    }\n\n    grid[newHeadRow][newHeadCol].direction = currentHeadDir; // retain previous head's dir in the new head\n  };\n\n  const isHeadOnByte = (ends: typeof snakeEnds): boolean => {\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    return grid[currentHeadRow][currentHeadCol].role === Role.Byte;\n  };\n\n  const calculateNewTail = (ends: typeof snakeEnds) => {\n    // no-op if the head is on a byte\n    if (isHeadOnByte(snakeEnds)) {\n      return;\n    }\n\n    /* ========================= TAIL ==============================*/\n    const currentTailRow = snakeEnds.tail.row;\n    const currentTailCol = snakeEnds.tail.col;\n    const pivotDir = grid[currentTailRow][currentTailCol].pivot;\n    // override current tail direction if there is a pivot direction left behind by the head at some point.\n    const currentTailDir =\n      pivotDir !== Direction.None\n        ? pivotDir\n        : gridObj.getCurrentTailDirection();\n\n    grid[currentTailRow][currentTailCol].role = Role.Canvas; // tail -> canvas\n    grid[currentTailRow][currentTailCol].direction = Direction.None; // tail -> canvas dir\n\n    if (pivotDir !== Direction.None)\n      grid[currentTailRow][currentTailCol].pivot = Direction.None; // clear pivots as the tail arrives\n\n    let newTailRow = currentTailRow;\n    let newTailCol = currentTailCol;\n\n    // now calculate the new position (row, col) for tail based on the current tail direction.\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newTailRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newTailRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newTailCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newTailCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        throw new Error(\"Invalid tail direction!\");\n      }\n    }\n\n    ends.tail.row = newTailRow;\n    ends.tail.col = newTailCol;\n    grid[newTailRow][newTailCol].role = Role.Tail; // body -> tail\n    grid[newTailRow][newTailCol].direction = currentTailDir;\n  };\n\n  // calcualte the new snake ends, and assign new roles as necessary\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    calculateNewTail(ends);\n    calculateNewHead(ends);\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    // set new roles on the new ends\n    const newEnds = getNewEnds(ends);\n    setSnakeEnds(newEnds);\n    // set new ends\n    gridObj.getSnake().setSnakeEnds(ends);\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? tickCountMs : null\n  );\n\n  const handleOnPlayPauseGame = useCallback(() => {\n    if (!playing) {\n      const currentTailDir = gridObj.getCurrentTailDirection();\n      const currentHeadDir = gridObj.getCurrentHeadDirection();\n      // on hitting play\n      if (\n        currentHeadDir === Direction.None &&\n        currentTailDir === Direction.None\n      ) {\n        gridObj.setCurrentTailDirection(Direction.Right);\n        gridObj.setCurrentHeadDirection(Direction.Right);\n      }\n    }\n\n    setPlaying((playing) => !playing);\n  }, [playing]);\n\n  const handleOnDebug = useCallback(() => {\n    setDebug((debug) => !debug);\n  }, []);\n\n  const isDebugMode = () => {\n    return urlSearchParams.get(\"debug\") === \"true\";\n  };\n\n  const handlers = useSwipeable({\n    onSwipedLeft: onSwipedLeft,\n    onSwipedRight: onSwipedRight,\n    onSwipedDown: onSwipedDown,\n    onSwipedUp: onSwipedUp,\n    // onTap: onTick,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  return (\n    <div {...handlers} className={\"game\"}>\n      <div className={\"gridContainer\"}>\n        {debug ? (\n          <DebugGrid grid={grid} />\n        ) : (\n          <GridRenderer\n            grid={grid}\n            currentHeadDirection={gridObj.getCurrentHeadDirection()}\n            currentTailDirection={gridObj.getCurrentTailDirection()}\n            currentTailPivot={gridObj.getPivotDirectionOnCurrentTail()}\n          />\n        )}\n      </div>\n      <div className={\"appUtils\"}>\n        {\n          <Button\n            onClick={handleOnPlayPauseGame}\n            label={playing ? \"Pause\" : \"Play\"}\n          />\n        }\n        {isDebugMode() ? (\n          <Button\n            onClick={handleOnDebug}\n            label={debug ? \"Debug Off\" : \"Debug On\"}\n          />\n        ) : null}\n      </div>\n      <WordTiles />\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/title.css\";\n\nexport const Title: React.FunctionComponent = React.memo(() => {\n  return <div className=\"title\">Snake Bytes</div>;\n});\n","import React from \"react\";\nimport { Title } from \"./title\";\nimport \"./style/header.css\";\n\nexport const Header: React.FunctionComponent = () => {\n  return (\n    <div className={\"header\"}>\n      <div className={\"menuleft\"}>\n        <button className=\"About\" style={{ margin: \"2px\" }}>\n          {\"About\"}\n        </button>\n        <button className=\"Instructions\" style={{ margin: \"2px\" }}>\n          {\"How\"}\n        </button>\n      </div>\n      <Title />\n      <div className={\"menuright\"}>\n        <button className=\"Sett\" style={{ margin: \"2px\" }}>\n          {\"Settings\"}\n        </button>\n        <button className=\"Stat\" style={{ margin: \"2px\" }}>\n          {\"Stats\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./style/App.css\";\n\nimport { GridContainer } from \"./gridContainer\";\nimport { Header } from \"./header\";\n\nexport const App: React.FunctionComponent = () => {\n  return (\n    <div className={\"appContainer\"}>\n      <Header />\n      <GridContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}