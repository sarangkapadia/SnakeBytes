{"version":3,"sources":["grid.tsx","title.tsx","box.tsx","score.tsx","button.tsx","useInterval.tsx","App.tsx","index.tsx"],"names":["Direction","Title","console","log","Box","React","memo","props","className","Score","currentScore","Button","onClick","label","root","document","querySelector","rootStyle","getComputedStyle","gridSize","parseInt","getPropertyValue","snakeEndsInit","tail","row","col","head","grid","Array","from","fill","currentHeadDir","Down","currentTailDir","Grid","useState","snakeEnds","setSnakeEnds","playing","setPlaying","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","id","setInterval","clearInterval","useInterval","ends","newCol","newRow","Up","Right","Left","Error","getNewEnds","handleOnNewGame","useCallback","flat","map","box","index","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.83a6d6b4.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport  { Box } from './box';\nimport { Score } from './score';\nimport { Button } from './button';\nimport { useInterval } from './useInterval';\nimport './style/grid.css'\n\nconst root = document.querySelector(':root')!;\nconst rootStyle = getComputedStyle(root);\nlet gridSize = parseInt(rootStyle.getPropertyValue('--gridSize'));\nconst snakeEndsInit = {tail:{row:5, col:5}, head:{row:8, col:5}};\n\nlet grid:string[][] = Array.from(Array(gridSize), () => new Array(gridSize).fill('b'));\ngrid[5][5] = grid[6][5] = grid[7][5] = grid[8][5] = 's';\nenum Direction{\n    Up = 1,\n    Down,\n    Right,\n    Left,\n}\n\nlet currentHeadDir = Direction.Down; \nlet currentTailDir = Direction.Down; \n\nexport const Grid: React.FunctionComponent = () => {\n    const [snakeEnds, setSnakeEnds] = useState(snakeEndsInit);\n    const [playing, setPlaying] = useState(false);\n\n    const getNewEnds = (ends: typeof snakeEnds) => {\n        let newCol = snakeEnds.head.col;\n        let newRow = snakeEnds.head.row;\n\n        switch(currentHeadDir){\n            case Direction.Up: {\n                newRow = (snakeEnds.head.row - 1) < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n                break;\n            }\n            case Direction.Down:{\n                newRow = (snakeEnds.head.row + 1) >= gridSize ? 0 : snakeEnds.head.row + 1;\n                break;\n            }\n            case Direction.Right:{\n                newCol = (snakeEnds.head.col + 1) >= gridSize ? 0 : snakeEnds.head.col + 1;\n                break;\n            }\n            case Direction.Left:{\n                newCol = (snakeEnds.head.col - 1) < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n                break;\n            }\n            default: throw(new Error('Invalid head direction!'));\n        }\n        ends.head.row = newRow;\n        ends.head.col = newCol;\n\n        grid[newRow][newCol] = 's'; // assign new head\n        grid[snakeEnds.tail.row][snakeEnds.tail.col] = 'b'; //clear current tail\n\n        newCol = snakeEnds.tail.col;\n        newRow = snakeEnds.tail.row;\n\n        switch(currentTailDir){\n            case Direction.Up: {\n                newRow = (snakeEnds.tail.row - 1) < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n                break;\n            }\n            case Direction.Down:{\n                newRow = (snakeEnds.tail.row + 1) >= gridSize ? 0 : snakeEnds.tail.row + 1;\n                break;\n            }\n            case Direction.Right:{\n                newCol = (snakeEnds.tail.col + 1) >= gridSize ? 0 : snakeEnds.tail.col + 1;\n                break;\n            }\n            case Direction.Left:{\n                newCol = (snakeEnds.tail.col - 1) < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n                break;\n            }\n            default: throw(new Error('Invalid tail direction!'));\n        }\n\n        ends.tail.row = newRow;\n        ends.tail.col = newCol;\n\n        return ends;\n    }\n\n    const onTick = () => {\n        let ends = {...snakeEnds};\n        console.log('head = ', ends.head, 'tail = ', ends.tail);\n        setSnakeEnds(getNewEnds(ends));\n    }\n\n    useInterval(\n        onTick,\n        // Delay in milliseconds or null to stop it\n        playing ? 100 : null\n      );\n\n    const handleOnNewGame = useCallback(() => {\n        setPlaying(playing => !playing);\n    },[]);\n\n    console.log(\"grid rendering\");\n\n    return (\n        <div >\n            <div className={'gridContainer'}>\n                {grid.flat().map((box, index) => <Box className={box==='b'?'box':'snake'} id={index} key={index} />)}\n            </div>\n            <div className={'appUtils'}>\n                <Score currentScore={0}></Score>\n                <Button onClick={handleOnNewGame} label={playing?'Stop Game':'New Game'}/>\n            </div>  \n    </div>);\n}","import React from 'react';\n\nexport const Title:React.FunctionComponent = () => {\n    console.log(\"Title rendering\");\n    return <h2>SNAKE</h2>;\n}","import React from 'react';\nimport './style/box.css';\n\ninterface IBoxProps{\n    id?: number,\n    className: string,\n}\n\nexport const Box:React.FunctionComponent<IBoxProps> = React.memo((props) => {\n    console.log(\"Box rendering props: \", props.className);\n    return <div className={props.className} ></div>;\n});","import React from 'react';\n\ninterface IScoreProps{\n    currentScore:number;\n}\nexport const Score: React.FunctionComponent<IScoreProps> = React.memo((props) => {\n    console.log(\"Score rendering: \" ,props.currentScore);\n    return <h2>Score: {props.currentScore}</h2>\n});","import React from 'react';\nimport './style/button.css';\n\ninterface IButtonProps{\n    onClick: () => void;\n    label: string;\n}\n\nexport const Button:React.FunctionComponent<IButtonProps> = React.memo((props) => {\n    console.log(\"Button rendering\");\n    return <button className={'newGame'} onClick={props.onClick} >{props.label}</button>;\n});","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from 'react';\nimport './style/App.css';\n\nimport { Title } from './title';\nimport { Grid } from './grid';\n\nexport const App: React.FunctionComponent = () => {\n  console.log(\"App rendering\");\n  \n  return (\n    <div className={'appContainer'} >\n      <Title />\n      <Grid />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}