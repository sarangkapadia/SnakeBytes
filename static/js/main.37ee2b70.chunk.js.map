{"version":3,"sources":["grid.ts","byte.tsx","byteList.ts","bytes.ts","snake.ts","box.tsx","gridRenderer.tsx","debug/debugBox.tsx","debug/debugGrid.tsx","wordtiles.tsx","gridContainer.tsx","useInterval.tsx","title.tsx","header.tsx","components/modals/modalHeader.tsx","components/modals/modalPage.tsx","snakeSmile.gif","components/modals/instructions.tsx","components/modals/settings.tsx","App.tsx","launchSettings.ts","index.tsx"],"names":["Direction","Role","Byte","React","memo","props","letter","className","byteList","Bytes","index","storageByteList","localStorage","getItem","this","JSON","parse","shuffle","setItem","stringify","storageIndex","array","console","log","randomIndex","currentIndex","length","Math","floor","random","nextWord","Snake","snakeEnds","tail","row","col","head","GridItem","role","Canvas","direction","None","pivot","Grid","grid","gridSize","snake","bytes","currentBytes","letterIndex","root","document","querySelector","rootStyle","getComputedStyle","parseInt","getPropertyValue","Array","i","j","getSnakeEnds","FirstTail","FirstHead","Body","Error","setRandomBytePositions","getNextWord","randomRow","randomCol","charAt","toUpperCase","Box","currentHeadDirection","currentTailDirection","currentTailPivot","getClassNameFromDirection","dir","Down","Up","Left","Right","Head","Tail","getClassName","GridRenderer","flat","map","item","id","getStringRole","getStringDirection","DebugBox","DebugGrid","WordTiles","score","toString","digit","tickCount","tickCountMs","parseFloat","substr","url","URL","window","location","href","gridObj","URLSearchParams","search","initGridData","getGridSize","getGrid","GridContainer","modalTitle","useState","getSnake","setSnakeEnds","playing","setPlaying","debug","setDebug","currentLetter","setCurrentLetter","movePending","hints","hintsOn","calculateNewTail","ends","currentHeadRow","currentHeadCol","isHeadOnByte","currentTailRow","currentTailCol","pivotDir","currentTailDir","getCurrentTailDirection","newTailRow","newTailCol","error","alert","getNewEnds","currentHeadDir","getCurrentHeadDirection","newHeadRow","newHeadCol","expected","getExpectedLetter","landed","currentByteSequence","getLetterIndex","incrementLetterIndex","calculateNewHead","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","setInterval","clearInterval","useInterval","newEnds","handleOnPlayPauseGame","useCallback","setCurrentTailDirection","setCurrentHeadDirection","handlers","useSwipeable","onSwipedLeft","setPivotOnCurrentHeadDirection","onSwipedRight","onSwipedDown","onSwipedUp","preventDefaultTouchmoveEvent","trackMouse","getPivotDirectionOnCurrentTail","Title","title","Header","outerTheme","createTheme","palette","primary","main","trim","ThemeProvider","theme","IconButton","color","size","MenuRounded","onClick","onClickInstructions","HelpRounded","LeaderboardRounded","onClickSettings","SettingsRounded","ModalHeader","ModalPage","onClose","setClassName","setTimeout","children","instructions","src","snakeSmile","alt","hintsLabel","inputProps","colorModeLabel","switchColorMain","switchColorLight","GreenSwitch","styled","Switch","backgroundColor","Settings","darkMode","hintsChecked","setHintsChecked","darkModeChecked","setDarkModeChecked","style","setProperty","checked","onChange","event","target","e","ModalObj","About","Instructions","Stats","Setting","initLaunchSettings","App","modalType","setModalType","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.37ee2b70.chunk.js","sourcesContent":["import { Bytes } from \"./bytes\";\nimport { Snake } from \"./snake\";\n\nexport enum Direction {\n  None,\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nexport enum Role {\n  Canvas,\n  Body,\n  Head,\n  Tail,\n  Byte,\n  FirstHead,\n  FirstTail,\n}\n\nexport interface IGridItem {\n  role: Role;\n  direction: Direction;\n  pivot: Direction;\n  letter: string;\n}\n\nclass GridItem implements IGridItem {\n  role = Role.Canvas;\n  direction = Direction.None;\n  pivot = Direction.None;\n  letter = \"\";\n}\n\nexport class Grid {\n  private grid: GridItem[][];\n  private gridSize: number;\n  private snake: Snake; // Grid contains a Snake\n\n  private bytes: Bytes; // Grid contains Bytes\n  private currentBytes: string = \"snake\";\n  private letterIndex: number = 0;\n\n  public constructor() {\n    const root = document.querySelector(\":root\")!;\n    const rootStyle = getComputedStyle(root);\n    this.gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\n    this.bytes = new Bytes();\n\n    this.grid = new Array(this.gridSize);\n    for (let i = 0; i < this.gridSize; i++) {\n      this.grid[i] = new Array(this.gridSize);\n    }\n\n    for (let i = 0; i < this.gridSize; i++) {\n      for (let j = 0; j < this.gridSize; j++) {\n        this.grid[i][j] = new GridItem();\n      }\n    }\n\n    this.snake = new Snake();\n  }\n\n  public getGrid(): GridItem[][] {\n    return this.grid;\n  }\n\n  public getGridSize(): number {\n    return this.gridSize;\n  }\n\n  public getSnake(): Snake {\n    return this.snake;\n  }\n\n  public getCurrentHeadDirection(): Direction {\n    const { head } = this.snake.getSnakeEnds();\n    return this.grid[head.row][head.col].direction;\n  }\n\n  public getCurrentTailDirection(): Direction {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].direction;\n  }\n\n  public setCurrentHeadDirection(direction: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].direction = direction;\n  }\n\n  public getPivotDirectionOnCurrentTail() {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].pivot;\n  }\n\n  public setCurrentTailDirection(direction: Direction) {\n    const { tail } = this.snake.getSnakeEnds();\n    this.grid[tail.row][tail.col].direction = direction;\n  }\n\n  setPivotOnCurrentHeadDirection(pivot: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].pivot = pivot;\n  }\n\n  public initGridData() {\n    const { tail, head } = this.snake.getSnakeEnds();\n\n    this.grid[tail.row][tail.col].direction = Direction.None;\n    this.grid[head.row][head.col].direction = Direction.None;\n\n    this.grid[tail.row][tail.col].role = Role.FirstTail;\n    this.grid[head.row][head.col].role = Role.FirstHead;\n\n    if (tail.row === head.row) {\n      // horizontal snake\n      for (let i = tail.col + 1; i < head.col; i++) {\n        this.grid[tail.row][i].role = Role.Body;\n        this.grid[head.row][i].role = Role.Body;\n      }\n    } else if (tail.col === head.col) {\n      // vertical snake\n      for (let i = tail.row + 1; i < head.row; i++) {\n        this.grid[i][tail.col].role = Role.Body;\n        this.grid[i][tail.col].role = Role.Body;\n      }\n    } else {\n      throw new Error(\"Snake init invalid\");\n    }\n    this.setRandomBytePositions();\n  }\n\n  // sprinkles the next word on the grid\n  public setRandomBytePositions() {\n    this.currentBytes = this.bytes.getNextWord();\n    for (let i = 0; i < this.currentBytes.length; i++) {\n      do {\n        let randomRow = Math.floor(Math.random() * this.gridSize);\n        let randomCol = Math.floor(Math.random() * this.gridSize);\n\n        if (this.grid[randomRow][randomCol].role === Role.Canvas) {\n          this.grid[randomRow][randomCol].role = Role.Byte;\n          this.grid[randomRow][randomCol].letter = this.currentBytes\n            .charAt(i)\n            .toUpperCase();\n          break;\n        } else {\n          console.log(\"Invalid random position\");\n        }\n      } while (1);\n    }\n  }\n\n  public getLetterIndex(): number {\n    return this.letterIndex;\n  }\n\n  public incrementLetterIndex() {\n    // increment index in a circular manner 0-4 and back to 0\n    this.letterIndex = (this.letterIndex + 1) % this.currentBytes.length;\n  }\n\n  public getExpectedLetter(): string {\n    const expected = this.currentBytes.charAt(this.letterIndex);\n    return expected;\n  }\n} // end of grid\n","import React from \"react\";\nimport \"./style/byte.css\";\n\ninterface IByteProps {\n  letter: string;\n}\nexport const Byte: React.FunctionComponent<IByteProps> = React.memo((props) => {\n  const { letter } = props;\n  return <div className=\"byteLetter\">{letter}</div>;\n});\n","export const byteList: string[] = [\n  \"about\",\n  \"above\",\n  \"actor\",\n  \"acute\",\n  \"admit\",\n  \"adopt\",\n  \"adult\",\n  \"after\",\n  \"again\",\n  \"agent\",\n  \"ahead\",\n  \"album\",\n  \"alive\",\n  \"allow\",\n  \"apart\",\n  \"apple\",\n  \"arena\",\n  \"array\",\n  \"audio\",\n  \"audit\",\n  \"avoid\",\n  \"award\",\n  \"aware\",\n  \"bases\",\n  \"basic\",\n  \"beach\",\n  \"begun\",\n  \"bench\",\n  \"birth\",\n  \"black\",\n  \"blind\",\n  \"block\",\n  \"booth\",\n  \"bound\",\n  \"brand\",\n  \"breed\",\n  \"bring\",\n  \"brown\",\n  \"build\",\n  \"built\",\n  \"buyer\",\n  \"cable\",\n  \"carry\",\n  \"catch\",\n  \"chair\",\n  \"chart\",\n  \"check\",\n  \"child\",\n  \"civil\",\n  \"claim\",\n  \"class\",\n  \"clear\",\n  \"click\",\n  \"clock\",\n  \"coach\",\n  \"count\",\n  \"court\",\n  \"cover\",\n  \"craft\",\n  \"cross\",\n  \"crowd\",\n  \"crown\",\n  \"curve\",\n  \"daily\",\n  \"dated\",\n  \"delay\",\n  \"depth\",\n  \"doubt\",\n  \"draft\",\n  \"drawn\",\n  \"dress\",\n  \"drill\",\n  \"drink\",\n  \"eight\",\n  \"elite\",\n  \"empty\",\n  \"enemy\",\n  \"enjoy\",\n  \"entry\",\n  \"error\",\n  \"event\",\n  \"exact\",\n  \"extra\",\n  \"faith\",\n  \"fault\",\n  \"fight\",\n  \"final\",\n  \"fixed\",\n  \"flash\",\n  \"fleet\",\n  \"floor\",\n  \"fluid\",\n  \"focus\",\n  \"force\",\n  \"forum\",\n  \"frame\",\n  \"frank\",\n  \"fraud\",\n  \"fresh\",\n  \"front\",\n  \"fruit\",\n  \"fully\",\n  \"funny\",\n  \"given\",\n  \"going\",\n  \"grace\",\n  \"grand\",\n  \"grant\",\n  \"grass\",\n  \"gross\",\n  \"group\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"happy\",\n  \"heavy\",\n  \"hence\",\n  \"house\",\n  \"human\",\n  \"image\",\n  \"input\",\n  \"issue\",\n  \"joint\",\n  \"judge\",\n  \"known\",\n  \"label\",\n  \"laugh\",\n  \"leave\",\n  \"legal\",\n  \"level\",\n  \"light\",\n  \"limit\",\n  \"local\",\n  \"logic\",\n  \"loose\",\n  \"lucky\",\n  \"lunch\",\n  \"lying\",\n  \"magic\",\n  \"major\",\n  \"maker\",\n  \"match\",\n  \"metal\",\n  \"might\",\n  \"minor\",\n  \"mixed\",\n  \"model\",\n  \"money\",\n  \"month\",\n  \"motor\",\n  \"mouth\",\n  \"movie\",\n  \"music\",\n  \"newly\",\n  \"novel\",\n  \"occur\",\n  \"often\",\n  \"paper\",\n  \"party\",\n  \"peace\",\n  \"phone\",\n  \"photo\",\n  \"piece\",\n  \"pilot\",\n  \"pitch\",\n  \"place\",\n  \"plain\",\n  \"plant\",\n  \"pound\",\n  \"power\",\n  \"press\",\n  \"price\",\n  \"prime\",\n  \"print\",\n  \"prior\",\n  \"prize\",\n  \"proof\",\n  \"proud\",\n  \"queen\",\n  \"quick\",\n  \"rapid\",\n  \"ratio\",\n  \"reach\",\n  \"river\",\n  \"robin\",\n  \"rough\",\n  \"round\",\n  \"royal\",\n  \"rural\",\n  \"shell\",\n  \"shift\",\n  \"shirt\",\n  \"shown\",\n  \"sight\",\n  \"since\",\n  \"sized\",\n  \"sorry\",\n  \"spend\",\n  \"spent\",\n  \"stand\",\n  \"stock\",\n  \"stuff\",\n  \"style\",\n  \"taken\",\n  \"taxes\",\n  \"teeth\",\n  \"thank\",\n  \"theft\",\n  \"their\",\n  \"theme\",\n  \"thick\",\n  \"think\",\n  \"third\",\n  \"threw\",\n  \"tight\",\n  \"title\",\n  \"total\",\n  \"track\",\n  \"train\",\n  \"trend\",\n  \"truck\",\n  \"truly\",\n  \"truth\",\n  \"twice\",\n  \"undue\",\n  \"union\",\n  \"unity\",\n  \"upper\",\n  \"valid\",\n  \"value\",\n  \"video\",\n  \"virus\",\n  \"visit\",\n  \"vital\",\n  \"voice\",\n  \"watch\",\n  \"water\",\n  \"wheel\",\n  \"which\",\n  \"while\",\n  \"whole\",\n  \"woman\",\n  \"women\",\n  \"world\",\n  \"worry\",\n  \"would\",\n  \"wound\",\n  \"write\",\n  \"young\",\n  \"youth\",\n];\n","import { byteList } from \"./byteList\";\n\nexport class Bytes {\n  private byteList: string[] = [];\n  private index: number = 0;\n\n  public shuffle(array: string[]) {\n    console.log(\"this should be called only once\");\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n  public constructor() {\n    const storageByteList = localStorage.getItem(\"byteList\");\n    if (storageByteList) {\n      this.byteList = JSON.parse(storageByteList);\n    } else {\n      this.byteList = this.shuffle(byteList);\n      localStorage.setItem(\"byteList\", JSON.stringify(this.byteList));\n    }\n\n    const storageIndex = localStorage.getItem(\"byteIndex\");\n    if (storageIndex) {\n      this.index = JSON.parse(storageIndex);\n    } else {\n      this.index = 0;\n      localStorage.setItem(\"byteIndex\", JSON.stringify(this.index));\n    }\n  }\n\n  public getNextWord(): string {\n    const nextWord = this.byteList[this.index];\n    this.index = (this.index + 1) % this.byteList.length;\n    localStorage.setItem(\"byteIndex\", JSON.stringify(this.index));\n    return nextWord;\n  }\n}\n","// Snake metadata\n\nexport interface ISnakeEnds {\n  tail: { row: number; col: number };\n  head: { row: number; col: number };\n}\n\nexport class Snake {\n  private snakeEnds: ISnakeEnds;\n\n  public constructor(snakeEnds?: ISnakeEnds) {\n    if (snakeEnds) {\n      this.snakeEnds = snakeEnds;\n      return;\n    }\n\n    this.snakeEnds = {\n      tail: { row: 5, col: 5 },\n      head: { row: 5, col: 10 },\n    };\n  }\n\n  public getSnakeEnds(): ISnakeEnds {\n    return this.snakeEnds;\n  }\n\n  public setSnakeEnds(snakeEnds: ISnakeEnds): void {\n    this.snakeEnds = snakeEnds;\n  }\n\n  public snakeAlive(): boolean {\n    // TBD check if the snake head is not collided with a body/tail\n    return true;\n  }\n\n  public snakeLength(): number {\n    // TBD - return the number of grid locations\n    return 4;\n  }\n}\n","import React from \"react\";\nimport { Byte } from \"./byte\";\nimport { Direction, Role } from \"./grid\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  role: Role;\n  letter: string;\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  const {\n    role,\n    letter,\n    currentHeadDirection,\n    currentTailDirection,\n    currentTailPivot,\n  } = props;\n\n  const getClassNameFromDirection = (dir: Direction) => {\n    switch (dir) {\n      case Direction.Down:\n        return \"t2b\";\n      case Direction.Up:\n        return \"b2t\";\n      case Direction.Left:\n        return \"r2l\";\n      case Direction.Right:\n        return \"l2r\";\n      case Direction.None:\n        return \"none\";\n      default:\n        throw new Error(\"invalid dir\");\n    }\n  };\n\n  const getClassName = (): string => {\n    switch (role) {\n      case Role.FirstTail:\n      case Role.Canvas:\n        return \"box\";\n      case Role.Head:\n        return `head_${getClassNameFromDirection(currentHeadDirection)}`;\n      case Role.FirstHead:\n        return \"head_none\";\n      case Role.Body:\n        return \"snake\";\n      case Role.Tail:\n        return `tail_${getClassNameFromDirection(\n          currentTailPivot !== Direction.None\n            ? currentTailPivot\n            : currentTailDirection\n        )}`;\n      case Role.Byte:\n        return \"byte\";\n      default:\n        throw new Error(\"invalid role\");\n    }\n  };\n\n  let className = getClassName();\n\n  return className === \"byte\" ? (\n    <div className={className}>\n      <Byte letter={letter} />\n    </div>\n  ) : (\n    <div className={className}></div>\n  );\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction, IGridItem } from \"./grid\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: IGridItem[][];\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentHeadDirection, currentTailDirection, currentTailPivot } =\n    props;\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((item, index) => (\n        <Box\n          role={item.role}\n          letter={item.letter}\n          id={index}\n          key={index}\n          currentHeadDirection={currentHeadDirection}\n          currentTailDirection={currentTailDirection}\n          currentTailPivot={currentTailPivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import { IGridItem, Role, Direction } from \"../grid\";\nimport \"../style/debug/debugBox.css\";\n\nconst getStringRole = (role: Role): string => {\n  switch (role) {\n    case Role.Body:\n      return \"b \";\n    case Role.Head:\n      return \"h \";\n    case Role.Tail:\n      return \"t \";\n    case Role.Canvas:\n      return \"c \";\n    case Role.Byte:\n      return \"f \";\n    default:\n      throw new Error(\"invalid role\");\n  }\n};\n\nconst getStringDirection = (direction: Direction): string => {\n  switch (direction) {\n    case Direction.Down:\n      return \"d \";\n    case Direction.Up:\n      return \"u \";\n    case Direction.Left:\n      return \"l \";\n    case Direction.Right:\n      return \"r \";\n    case Direction.None:\n      return \"n \";\n    default:\n      throw new Error(\"invalid direction\");\n  }\n};\n\nexport const DebugBox: React.FunctionComponent<IGridItem> = (props) => {\n  const { role, direction, pivot } = props;\n  return (\n    <div className={\"debugBox\"}>\n      {role > 0 ? getStringRole(role) : null}\n      {direction > 0 ? getStringDirection(direction) : null}\n      {role > 0 ? getStringDirection(pivot).toUpperCase() : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DebugBox } from \"./debugBox\";\nimport { IGridItem } from \"../grid\";\n\nimport \"../style/debug/debugGrid.css\";\n\ninterface IDebugGridProps {\n  grid: IGridItem[][];\n}\n\nexport const DebugGrid: React.FunctionComponent<IDebugGridProps> = (props) => {\n  const { grid } = props;\n  return (\n    <div className={\"debugGrid\"}>\n      {grid.flat().map((item, index) => (\n        <DebugBox\n          key={index}\n          role={item.role}\n          letter={item.letter}\n          direction={item.direction}\n          pivot={item.pivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import \"./style/wordTiles.css\";\nimport \"./style/tile.css\";\nimport React from \"react\";\ninterface IWordTileProps {\n  bytes: string;\n  score: number;\n}\nexport const WordTiles: React.FunctionComponent<IWordTileProps> = React.memo(\n  (props: IWordTileProps) => {\n    return (\n      <div className={\"wordTilesContainer\"}>\n        <div className=\"tileContainer\">\n          {[...props.bytes].map((letter, index) => (\n            <div key={index} className={\"tileLetter\"}>\n              {letter}\n            </div>\n          ))}\n        </div>\n        <div className=\"tileContainer\">\n          {[...props.score.toString()].map((digit, index) => (\n            <div key={index} className={\"tileNumber\"}>\n              {digit}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n);\n","import React, { useCallback, useEffect, useState } from \"react\";\n//import { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { Grid, Direction, Role } from \"./grid\";\nimport { DebugGrid } from \"./debug/debugGrid\";\nimport \"./style/gridContainer.css\";\nimport { WordTiles } from \"./wordtiles\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst tickCount = rootStyle.getPropertyValue(\"--tick\");\nconst tickCountMs =\n  parseFloat(tickCount.substr(0, tickCount.length - 1)) * 1000;\n\nconst url: URL = new URL(window.location.href);\nconst urlSearchParams = new URLSearchParams(url.search);\n\nconst gridObj = new Grid();\ngridObj.initGridData();\n\nconst gridSize = gridObj.getGridSize();\nconst grid = gridObj.getGrid();\n\ninterface IGridContainer {\n  modalTitle: string;\n}\nexport const GridContainer: React.FunctionComponent<IGridContainer> = (\n  props\n) => {\n  const { modalTitle } = props;\n  const [snakeEnds, setSnakeEnds] = useState(gridObj.getSnake().getSnakeEnds());\n  const [playing, setPlaying] = useState(false);\n  const [debug, setDebug] = useState(false);\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n  let movePending = false;\n  const hints = localStorage.getItem(\"hints\");\n  const hintsOn = hints ? JSON.parse(hints) : \"true\";\n  console.log(\"hints ON = \", hintsOn);\n  // add logic in these to detect game end\n  const onSwipedLeft = () => {\n    if (movePending) return;\n\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Left);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Left);\n    movePending = true;\n  };\n\n  const onSwipedRight = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Right);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Right);\n    movePending = true;\n  };\n\n  const onSwipedUp = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Up);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Up);\n    movePending = true;\n  };\n\n  const onSwipedDown = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Down);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Down);\n    movePending = true;\n  };\n\n  const calculateNewHead = (ends: typeof snakeEnds) => {\n    /* ========================= HEAD ==============================*/\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n\n    grid[currentHeadRow][currentHeadCol].role = Role.Body; // make current head -> snake body\n    grid[currentHeadRow][currentHeadCol].direction = Direction.None; // make current head's dir none\n\n    // now calculate the new position (row, col) for head based on the current head direction.\n    let newHeadRow = currentHeadRow;\n    let newHeadCol = currentHeadCol;\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newHeadRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newHeadRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newHeadCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newHeadCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        const error = \"Invalid head direction!\";\n        alert(error);\n        throw new Error(error);\n      }\n    }\n    ends.head.row = newHeadRow;\n    ends.head.col = newHeadCol;\n\n    // check if new Head is a valid role\n    switch (grid[newHeadRow][newHeadCol].role) {\n      case Role.Tail:\n      case Role.Canvas: {\n        grid[newHeadRow][newHeadCol].role = Role.Head; // canvas -> head'\n        break;\n      }\n      case Role.Byte: {\n        const expected = gridObj.getExpectedLetter().toUpperCase();\n        const landed = grid[newHeadRow][newHeadCol].letter;\n\n        if (landed !== expected) {\n          const error = `Wrong letter, expected = ${expected}, letter = ${landed}`;\n          alert(error);\n          throw new Error(error);\n        }\n\n        const currentByteSequence =\n          gridObj.getLetterIndex() > 0 ? currentLetter + landed : landed;\n        setCurrentLetter(currentByteSequence);\n\n        gridObj.incrementLetterIndex();\n        if (gridObj.getLetterIndex() === 0) {\n          gridObj.setRandomBytePositions();\n        }\n\n        break;\n      }\n      default:\n        setPlaying(false);\n        const error = `Head collision with invalid role , ${grid[newHeadRow][newHeadCol].role}`;\n        alert(error);\n        throw new Error(error);\n    }\n\n    grid[newHeadRow][newHeadCol].direction = currentHeadDir; // retain previous head's dir in the new head\n  };\n\n  const isHeadOnByte = (ends: typeof snakeEnds): boolean => {\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    return grid[currentHeadRow][currentHeadCol].role === Role.Byte;\n  };\n\n  const calculateNewTail = (ends: typeof snakeEnds) => {\n    // no-op if the head is on a byte\n    if (isHeadOnByte(snakeEnds)) {\n      return;\n    }\n\n    /* ========================= TAIL ==============================*/\n    const currentTailRow = snakeEnds.tail.row;\n    const currentTailCol = snakeEnds.tail.col;\n    const pivotDir = grid[currentTailRow][currentTailCol].pivot;\n    // override current tail direction if there is a pivot direction left behind by the head at some point.\n    const currentTailDir =\n      pivotDir !== Direction.None\n        ? pivotDir\n        : gridObj.getCurrentTailDirection();\n\n    grid[currentTailRow][currentTailCol].role = Role.Canvas; // tail -> canvas\n    grid[currentTailRow][currentTailCol].direction = Direction.None; // tail -> canvas dir\n\n    if (pivotDir !== Direction.None)\n      grid[currentTailRow][currentTailCol].pivot = Direction.None; // clear pivots as the tail arrives\n\n    let newTailRow = currentTailRow;\n    let newTailCol = currentTailCol;\n\n    // now calculate the new position (row, col) for tail based on the current tail direction.\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newTailRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newTailRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newTailCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newTailCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        const error = \"Invalid tail direction!\";\n        alert(error);\n        throw new Error(error);\n      }\n    }\n\n    ends.tail.row = newTailRow;\n    ends.tail.col = newTailCol;\n    grid[newTailRow][newTailCol].role = Role.Tail; // body -> tail\n    grid[newTailRow][newTailCol].direction = currentTailDir;\n  };\n\n  // calcualte the new snake ends, and assign new roles as necessary\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    calculateNewTail(ends);\n    calculateNewHead(ends);\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    // set new roles on the new ends\n    const newEnds = getNewEnds(ends);\n    setSnakeEnds(newEnds);\n    // set new ends\n    gridObj.getSnake().setSnakeEnds(ends);\n    movePending = false;\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? tickCountMs : null\n  );\n\n  useEffect(() => {\n    if (modalTitle !== \"\") setPlaying(false);\n  }, [modalTitle]);\n\n  const handleOnPlayPauseGame = useCallback(() => {\n    if (modalTitle !== \"\") {\n      // pause and return\n      setPlaying(false);\n      return;\n    }\n\n    if (!playing) {\n      const currentTailDir = gridObj.getCurrentTailDirection();\n      const currentHeadDir = gridObj.getCurrentHeadDirection();\n      // on play first time\n      if (\n        currentHeadDir === Direction.None &&\n        currentTailDir === Direction.None\n      ) {\n        gridObj.setCurrentTailDirection(Direction.Right);\n        gridObj.setCurrentHeadDirection(Direction.Right);\n      }\n    }\n\n    setPlaying((playing) => !playing);\n  }, [playing, modalTitle]);\n\n  const handleOnDebug = useCallback(() => {\n    setDebug((debug) => !debug);\n  }, []);\n\n  const isDebugMode = () => {\n    return urlSearchParams.get(\"debug\") === \"true\";\n  };\n\n  const handlers = useSwipeable({\n    onSwipedLeft: onSwipedLeft,\n    onSwipedRight: onSwipedRight,\n    onSwipedDown: onSwipedDown,\n    onSwipedUp: onSwipedUp,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  return (\n    <div {...handlers} className={\"game\"}>\n      <div className={\"gridContainer\"}>\n        {debug ? (\n          <DebugGrid grid={grid} />\n        ) : (\n          <GridRenderer\n            grid={grid}\n            currentHeadDirection={gridObj.getCurrentHeadDirection()}\n            currentTailDirection={gridObj.getCurrentTailDirection()}\n            currentTailPivot={gridObj.getPivotDirectionOnCurrentTail()}\n          />\n        )}\n      </div>\n      {/* <div className={\"appUtils\"}>\n        {\n          <Button\n            onClick={handleOnPlayPauseGame}\n            label={playing ? \"Pause\" : \"Play\"}\n          />\n        }\n        {isDebugMode() ? (\n          <Button\n            onClick={handleOnDebug}\n            label={debug ? \"Debug Off\" : \"Debug On\"}\n          />\n        ) : null}\n      </div> */}\n      <WordTiles bytes={currentLetter} score={123} />\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/title.css\";\n\ninterface ITitleProps {\n  title: string;\n}\nexport const Title: React.FunctionComponent<ITitleProps> = React.memo(\n  (props) => {\n    return <div className=\"title\">{props.title}</div>;\n  }\n);\n","import React from \"react\";\nimport { Title } from \"./title\";\nimport \"./style/header.css\";\nimport { IconButton } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport {\n  SettingsRounded,\n  MenuRounded,\n  HelpRounded,\n  LeaderboardRounded,\n} from \"@mui/icons-material\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\ninterface IHeader {\n  onClickInstructions: () => void;\n  onClickSettings: () => void;\n}\n\nexport const Header: React.FunctionComponent<IHeader> = (props) => {\n  const outerTheme = createTheme({\n    palette: {\n      primary: {\n        main: rootStyle.getPropertyValue(\"--fontColor\").trim(), // hex versions of --var(fontColor)\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <div className={\"header\"}>\n        <div className={\"menuleft\"}>\n          <IconButton aria-label=\"Menu\" color=\"primary\" size=\"small\">\n            <MenuRounded />\n          </IconButton>\n          <IconButton\n            aria-label=\"Instruction\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={props.onClickInstructions}\n          >\n            <HelpRounded />\n          </IconButton>\n        </div>\n        <Title title={\"Snakespeare\"} />\n        <div className={\"menuright\"}>\n          <IconButton aria-label=\"Stats\" color=\"primary\" size=\"small\">\n            <LeaderboardRounded />\n          </IconButton>\n          <IconButton\n            aria-label=\"Settings\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={props.onClickSettings}\n          >\n            <SettingsRounded />\n          </IconButton>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport { Title } from \"../../title\";\nimport \"../../style/modalHeader.css\";\n\ninterface IModalHeader {\n  onClick: () => void;\n  title: string;\n}\nexport const ModalHeader: React.FunctionComponent<IModalHeader> = React.memo(\n  (props) => {\n    const { onClick, title } = props;\n    return (\n      <div className={\"modalHeader\"}>\n        <div className={\"titleContainer\"}>\n          <Title title={title} />\n        </div>\n        <button className={\"close\"} onClick={onClick}>\n          X\n        </button>\n      </div>\n    );\n  }\n);\n","import React, { useEffect, useState } from \"react\";\nimport \"../../style/modalPage.css\";\nimport { ModalHeader } from \"./modalHeader\";\n\ninterface IModalPage {\n  onClose: () => void;\n  title: string;\n}\n\nexport const ModalPage: React.FunctionComponent<IModalPage> = React.memo(\n  (props) => {\n    const { onClose, title } = props;\n    const [className, setClassName] = useState(\"closed\");\n\n    useEffect(() => {\n      setClassName(title !== \"\" ? \"modalOverlayIn\" : \"modalOverlayOut\");\n      if (title === \"\") {\n        setTimeout(() => setClassName(\"closed\"), 400);\n      }\n    }, [title]);\n\n    useEffect(() => {\n      setClassName(\"closed\");\n    }, []);\n\n    return (\n      <div className={className}>\n        <div className={\"modalContainer\"}>\n          <ModalHeader onClick={onClose} title={title} />\n          {props.children}\n        </div>\n      </div>\n    );\n  }\n);\n","export default __webpack_public_path__ + \"static/media/snakeSmile.c4c253be.gif\";","import snakeSmile from \"../../snakeSmile.gif\";\nimport \"../../style/instructions.css\";\n\nexport const instructions = (\n  <>\n    <p>Swipe anywhere on the screen to start the game.</p>\n    <p>\n      Navigate your snake by swiping left, right, up or down. This will change\n      the direction of the snake's head.\n    </p>\n    <p>\n      Steer the snake to capture the letters in the correct order and create a 5\n      letter word using the randomly placed letters. Score 100 points per word\n      solved + bonus points for speedy solutions.\n    </p>\n    <p>Avoid colliding the snake's head with it's own body.</p>\n\n    <img src={snakeSmile} alt={\"funny snake GIF\"} />\n  </>\n);\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport \"../../style/settings.css\";\nimport { styled } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nconst hintsLabel = { inputProps: { \"aria-label\": \"Hints\" } };\nconst colorModeLabel = { inputProps: { \"aria-label\": \"Dark mode\" } };\n\n// move this to a useEffect\nconst root = document.querySelector<HTMLElement>(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst switchColorMain = rootStyle.getPropertyValue(\"--byteColor\");\nconst switchColorLight = rootStyle.getPropertyValue(\"--snakeColor\");\n\nconst GreenSwitch = styled(Switch)(({ theme }) => ({\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\n    color: switchColorMain.trim(),\n  },\n  \"& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track\": {\n    backgroundColor: switchColorMain.trim(),\n  },\n  \"& .MuiSwitch-track\": {\n    backgroundColor: switchColorLight.trim(),\n  },\n}));\n\nexport const Settings: React.FunctionComponent = () => {\n  const darkMode = localStorage.getItem(\"darkMode\");\n  const hints = localStorage.getItem(\"hints\");\n\n  const [hintsChecked, setHintsChecked] = useState(\n    hints ? JSON.parse(hints) : true\n  );\n  const [darkModeChecked, setDarkModeChecked] = useState(\n    darkMode ? JSON.parse(darkMode) : true\n  );\n\n  useEffect(() => {\n    if (darkModeChecked) {\n      root.style.setProperty(\n        \"--appBackgroundColor\",\n        rootStyle.getPropertyValue(\"--darkBackground\").trim()\n      );\n      root.style.setProperty(\n        \"--fontColor\",\n        rootStyle.getPropertyValue(\"--darkFont\").trim()\n      );\n      root.style.setProperty(\n        \"--boxBackgroundColor\",\n        rootStyle.getPropertyValue(\"--darkBox\").trim()\n      );\n    } else {\n      root.style.setProperty(\n        \"--appBackgroundColor\",\n        rootStyle.getPropertyValue(\"--lightBackground\").trim()\n      );\n      root.style.setProperty(\n        \"--fontColor\",\n        rootStyle.getPropertyValue(\"--lightFont\").trim()\n      );\n      root.style.setProperty(\n        \"--boxBackgroundColor\",\n        rootStyle.getPropertyValue(\"--lightBox\").trim()\n      );\n    }\n  }, [darkModeChecked]);\n\n  // todo : write to local storage\n  const handleHintsChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      localStorage.setItem(\"hints\", JSON.stringify(event.target.checked));\n    } catch (e) {\n      console.log(\"cannot write to localStorage \", e);\n    }\n    setHintsChecked(event.target.checked);\n  };\n\n  // todo : write to local storage\n  const handleDarkModeChanged = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    try {\n      localStorage.setItem(\"darkMode\", JSON.stringify(event.target.checked));\n    } catch (e) {\n      console.log(\"cannot write to localStorage \", e);\n    }\n    setDarkModeChecked(event.target.checked);\n  };\n\n  return (\n    <div className=\"settingsContainer\">\n      <div className=\"rowContainer\">\n        <div className=\"settingsTitleContainer\">\n          <div className=\"rowTitle\">{\"Hints\"}</div>\n        </div>\n        <GreenSwitch\n          {...hintsLabel}\n          checked={hintsChecked}\n          onChange={handleHintsChanged}\n        />\n      </div>\n      <div className=\"rowContainer\">\n        <div className=\"settingsTitleContainer\">\n          <div className=\"rowTitle\">{\"Dark mode\"}</div>\n        </div>\n        <GreenSwitch\n          {...colorModeLabel}\n          checked={darkModeChecked}\n          onChange={handleDarkModeChanged}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./style/App.css\";\n\nimport { GridContainer } from \"./gridContainer\";\nimport { Header } from \"./header\";\nimport { ModalPage } from \"./components/modals/modalPage\";\nimport { instructions } from \"./components/modals/instructions\";\nimport { Settings } from \"./components/modals/settings\";\nimport { initLaunchSettings } from \"./launchSettings\";\n\nconst ModalObj = {\n  None: { title: \"\", children: <></> },\n  About: { title: \"About\", children: null },\n  Instructions: { title: \"How to play\", children: instructions },\n  Stats: { title: \"Statistics\", children: null },\n  Setting: { title: \"Settings\", children: <Settings /> },\n};\n\ninitLaunchSettings();\n\nexport const App: React.FunctionComponent = () => {\n  const [modalType, setModalType] = useState<{\n    title: string;\n    children: JSX.Element;\n  }>(ModalObj.None);\n\n  const onClickInstructions = () => {\n    setModalType(ModalObj.Instructions);\n  };\n  const onClickSettings = () => {\n    setModalType(ModalObj.Setting);\n  };\n\n  const onCloseModal = () => {\n    setModalType(ModalObj.None);\n  };\n\n  return (\n    <div className={\"appContainer\"}>\n      <Header\n        onClickInstructions={onClickInstructions}\n        onClickSettings={onClickSettings}\n      />\n      <ModalPage onClose={onCloseModal} title={modalType.title}>\n        {modalType.children}\n      </ModalPage>\n      <GridContainer modalTitle={modalType.title} />\n    </div>\n  );\n};\n","export const initLaunchSettings = () => {\n  const root = document.querySelector<HTMLElement>(\":root\")!;\n  const rootStyle = getComputedStyle(root);\n\n  const darkMode = localStorage.getItem(\"darkMode\");\n  const darkModeChecked = darkMode ? JSON.parse(darkMode) : true; // default turn on dark mode\n\n  if (darkModeChecked) {\n    root.style.setProperty(\n      \"--appBackgroundColor\",\n      rootStyle.getPropertyValue(\"--darkBackground\").trim()\n    );\n    root.style.setProperty(\n      \"--fontColor\",\n      rootStyle.getPropertyValue(\"--darkFont\").trim()\n    );\n    root.style.setProperty(\n      \"--boxBackgroundColor\",\n      rootStyle.getPropertyValue(\"--darkBox\").trim()\n    );\n  } else {\n    root.style.setProperty(\n      \"--appBackgroundColor\",\n      rootStyle.getPropertyValue(\"--lightBackground\").trim()\n    );\n    root.style.setProperty(\n      \"--fontColor\",\n      rootStyle.getPropertyValue(\"--lightFont\").trim()\n    );\n    root.style.setProperty(\n      \"--boxBackgroundColor\",\n      rootStyle.getPropertyValue(\"--lightBox\").trim()\n    );\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}