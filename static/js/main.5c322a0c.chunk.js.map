{"version":3,"sources":["grid.ts","byte.tsx","byteList.ts","bytes.ts","snake.ts","box.tsx","gridRenderer.tsx","debug/debugBox.tsx","debug/debugGrid.tsx","wordtiles.tsx","gridContainer.tsx","useInterval.tsx","title.tsx","header.tsx","components/modals/modalHeader.tsx","components/modals/modalPage.tsx","snakeSmile.gif","components/modals/instructions.tsx","components/modals/settings.tsx","App.tsx","index.tsx"],"names":["Direction","Role","Byte","React","memo","props","letter","className","byteList","Bytes","index","console","log","this","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","nextWord","Snake","snakeEnds","tail","row","col","head","GridItem","role","Canvas","direction","None","pivot","Grid","grid","gridSize","snake","bytes","currentBytes","letterIndex","root","document","querySelector","rootStyle","getComputedStyle","parseInt","getPropertyValue","Array","i","j","getSnakeEnds","FirstTail","FirstHead","Body","Error","setRandomBytePositions","getNextWord","randomRow","randomCol","charAt","toUpperCase","Box","currentHeadDirection","currentTailDirection","currentTailPivot","getClassNameFromDirection","dir","Down","Up","Left","Right","Head","Tail","getClassName","GridRenderer","flat","map","item","id","getStringRole","getStringDirection","DebugBox","DebugGrid","WordTiles","tickCount","tickCountMs","parseFloat","substr","url","URL","window","location","href","gridObj","URLSearchParams","search","initGridData","getGridSize","getGrid","GridContainer","modalTitle","useState","getSnake","setSnakeEnds","playing","setPlaying","debug","setDebug","currentLetter","setCurrentLetter","movePending","calculateNewTail","ends","currentHeadRow","currentHeadCol","isHeadOnByte","currentTailRow","currentTailCol","pivotDir","currentTailDir","getCurrentTailDirection","newTailRow","newTailCol","error","alert","getNewEnds","currentHeadDir","getCurrentHeadDirection","newHeadRow","newHeadCol","expected","getExpectedLetter","landed","currentByteSequence","getLetterIndex","incrementLetterIndex","calculateNewHead","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","setInterval","clearInterval","useInterval","newEnds","handleOnPlayPauseGame","useCallback","setCurrentTailDirection","setCurrentHeadDirection","handlers","useSwipeable","onSwipedLeft","setPivotOnCurrentHeadDirection","onSwipedRight","onSwipedDown","onSwipedUp","preventDefaultTouchmoveEvent","trackMouse","getPivotDirectionOnCurrentTail","Title","title","fontColor","outerTheme","createTheme","palette","primary","main","trim","Header","ThemeProvider","theme","IconButton","color","size","MenuRounded","onClick","onClickInstructions","HelpRounded","LeaderboardRounded","onClickSettings","SettingsRounded","ModalHeader","ModalPage","onClose","setClassName","setTimeout","children","instructions","src","snakeSmile","alt","hintsLabel","inputProps","colorModeLabel","switchColorMain","switchColorLight","GreenSwitch","styled","Switch","backgroundColor","Settings","hintsChecked","setHintsChecked","darkModeChecked","setDarkModeChecked","style","setProperty","checked","onChange","event","target","ModalObj","About","Instructions","Stats","Setting","App","modalType","setModalType","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5c322a0c.chunk.js","sourcesContent":["import { byteList } from \"./byteList\";\nimport { Bytes } from \"./bytes\";\nimport { Snake } from \"./snake\";\n\nexport enum Direction {\n  None,\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nexport enum Role {\n  Canvas,\n  Body,\n  Head,\n  Tail,\n  Byte,\n  FirstHead,\n  FirstTail,\n}\n\nexport interface IGridItem {\n  role: Role;\n  direction: Direction;\n  pivot: Direction;\n  letter: string;\n}\n\nclass GridItem implements IGridItem {\n  role = Role.Canvas;\n  direction = Direction.None;\n  pivot = Direction.None;\n  letter = \"\";\n}\n\nexport class Grid {\n  private grid: GridItem[][];\n  private gridSize: number;\n  private snake: Snake; // Grid contains a Snake\n\n  private bytes: Bytes; // Grid contains Bytes\n  private currentBytes: string = \"snake\";\n  private letterIndex: number = 0;\n\n  public constructor() {\n    const root = document.querySelector(\":root\")!;\n    const rootStyle = getComputedStyle(root);\n    this.gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\n    this.bytes = new Bytes(byteList);\n\n    this.grid = new Array(this.gridSize);\n    for (let i = 0; i < this.gridSize; i++) {\n      this.grid[i] = new Array(this.gridSize);\n    }\n\n    for (let i = 0; i < this.gridSize; i++) {\n      for (let j = 0; j < this.gridSize; j++) {\n        this.grid[i][j] = new GridItem();\n      }\n    }\n\n    this.snake = new Snake();\n  }\n\n  public getGrid(): GridItem[][] {\n    return this.grid;\n  }\n\n  public getGridSize(): number {\n    return this.gridSize;\n  }\n\n  public getSnake(): Snake {\n    return this.snake;\n  }\n\n  public getCurrentHeadDirection(): Direction {\n    const { head } = this.snake.getSnakeEnds();\n    return this.grid[head.row][head.col].direction;\n  }\n\n  public getCurrentTailDirection(): Direction {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].direction;\n  }\n\n  public setCurrentHeadDirection(direction: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].direction = direction;\n  }\n\n  public getPivotDirectionOnCurrentTail() {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].pivot;\n  }\n\n  public setCurrentTailDirection(direction: Direction) {\n    const { tail } = this.snake.getSnakeEnds();\n    this.grid[tail.row][tail.col].direction = direction;\n  }\n\n  setPivotOnCurrentHeadDirection(pivot: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].pivot = pivot;\n  }\n\n  public initGridData() {\n    const { tail, head } = this.snake.getSnakeEnds();\n\n    this.grid[tail.row][tail.col].direction = Direction.None;\n    this.grid[head.row][head.col].direction = Direction.None;\n\n    this.grid[tail.row][tail.col].role = Role.FirstTail;\n    this.grid[head.row][head.col].role = Role.FirstHead;\n\n    if (tail.row === head.row) {\n      // horizontal snake\n      for (let i = tail.col + 1; i < head.col; i++) {\n        this.grid[tail.row][i].role = Role.Body;\n        this.grid[head.row][i].role = Role.Body;\n      }\n    } else if (tail.col === head.col) {\n      // vertical snake\n      for (let i = tail.row + 1; i < head.row; i++) {\n        this.grid[i][tail.col].role = Role.Body;\n        this.grid[i][tail.col].role = Role.Body;\n      }\n    } else {\n      throw new Error(\"Snake init invalid\");\n    }\n    this.setRandomBytePositions();\n  }\n\n  // sprinkles the next word on the grid\n  public setRandomBytePositions() {\n    this.currentBytes = this.bytes.getNextWord();\n    for (let i = 0; i < this.currentBytes.length; i++) {\n      do {\n        let randomRow = Math.floor(Math.random() * this.gridSize);\n        let randomCol = Math.floor(Math.random() * this.gridSize);\n\n        if (this.grid[randomRow][randomCol].role === Role.Canvas) {\n          this.grid[randomRow][randomCol].role = Role.Byte;\n          this.grid[randomRow][randomCol].letter = this.currentBytes\n            .charAt(i)\n            .toUpperCase();\n          break;\n        } else {\n          console.log(\"Invalid random position\");\n        }\n      } while (1);\n    }\n  }\n\n  public getLetterIndex(): number {\n    return this.letterIndex;\n  }\n\n  public incrementLetterIndex() {\n    // increment index in a circular manner 0-4 and back to 0\n    this.letterIndex = (this.letterIndex + 1) % this.currentBytes.length;\n  }\n\n  public getExpectedLetter(): string {\n    const expected = this.currentBytes.charAt(this.letterIndex);\n    return expected;\n  }\n} // end of grid\n","import React from \"react\";\nimport \"./style/byte.css\";\n\ninterface IByteProps {\n  letter: string;\n}\nexport const Byte: React.FunctionComponent<IByteProps> = React.memo((props) => {\n  const { letter } = props;\n  return <div className=\"byte\">{letter}</div>;\n});\n","export const byteList: string[] = [\n  \"about\",\n  \"above\",\n  \"actor\",\n  \"acute\",\n  \"admit\",\n  \"adopt\",\n  \"adult\",\n  \"after\",\n  \"again\",\n  \"agent\",\n  \"ahead\",\n  \"album\",\n  \"alive\",\n  \"allow\",\n  \"apart\",\n  \"apple\",\n  \"arena\",\n  \"array\",\n  \"audio\",\n  \"audit\",\n  \"avoid\",\n  \"award\",\n  \"aware\",\n  \"bases\",\n  \"basic\",\n  \"beach\",\n  \"begun\",\n  \"bench\",\n  \"birth\",\n  \"black\",\n  \"blind\",\n  \"block\",\n  \"booth\",\n  \"bound\",\n  \"brand\",\n  \"breed\",\n  \"bring\",\n  \"brown\",\n  \"build\",\n  \"built\",\n  \"buyer\",\n  \"cable\",\n  \"carry\",\n  \"catch\",\n  \"chair\",\n  \"chart\",\n  \"check\",\n  \"child\",\n  \"civil\",\n  \"claim\",\n  \"class\",\n  \"clear\",\n  \"click\",\n  \"clock\",\n  \"coach\",\n  \"count\",\n  \"court\",\n  \"cover\",\n  \"craft\",\n  \"cross\",\n  \"crowd\",\n  \"crown\",\n  \"curve\",\n  \"daily\",\n  \"dated\",\n  \"delay\",\n  \"depth\",\n  \"doubt\",\n  \"draft\",\n  \"drawn\",\n  \"dress\",\n  \"drill\",\n  \"drink\",\n  \"eight\",\n  \"elite\",\n  \"empty\",\n  \"enemy\",\n  \"enjoy\",\n  \"entry\",\n  \"error\",\n  \"event\",\n  \"exact\",\n  \"extra\",\n  \"faith\",\n  \"fault\",\n  \"fight\",\n  \"final\",\n  \"fixed\",\n  \"flash\",\n  \"fleet\",\n  \"floor\",\n  \"fluid\",\n  \"focus\",\n  \"force\",\n  \"forum\",\n  \"frame\",\n  \"frank\",\n  \"fraud\",\n  \"fresh\",\n  \"front\",\n  \"fruit\",\n  \"fully\",\n  \"funny\",\n  \"given\",\n  \"going\",\n  \"grace\",\n  \"grand\",\n  \"grant\",\n  \"grass\",\n  \"gross\",\n  \"group\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"happy\",\n  \"heavy\",\n  \"hence\",\n  \"house\",\n  \"human\",\n  \"image\",\n  \"input\",\n  \"issue\",\n  \"joint\",\n  \"judge\",\n  \"known\",\n  \"label\",\n  \"laugh\",\n  \"leave\",\n  \"legal\",\n  \"level\",\n  \"light\",\n  \"limit\",\n  \"local\",\n  \"logic\",\n  \"loose\",\n  \"lucky\",\n  \"lunch\",\n  \"lying\",\n  \"magic\",\n  \"major\",\n  \"maker\",\n  \"match\",\n  \"metal\",\n  \"might\",\n  \"minor\",\n  \"mixed\",\n  \"model\",\n  \"money\",\n  \"month\",\n  \"motor\",\n  \"mouth\",\n  \"movie\",\n  \"music\",\n  \"newly\",\n  \"novel\",\n  \"occur\",\n  \"often\",\n  \"paper\",\n  \"party\",\n  \"peace\",\n  \"phone\",\n  \"photo\",\n  \"piece\",\n  \"pilot\",\n  \"pitch\",\n  \"place\",\n  \"plain\",\n  \"plant\",\n  \"pound\",\n  \"power\",\n  \"press\",\n  \"price\",\n  \"prime\",\n  \"print\",\n  \"prior\",\n  \"prize\",\n  \"proof\",\n  \"proud\",\n  \"queen\",\n  \"quick\",\n  \"rapid\",\n  \"ratio\",\n  \"reach\",\n  \"river\",\n  \"robin\",\n  \"rough\",\n  \"round\",\n  \"royal\",\n  \"rural\",\n  \"shell\",\n  \"shift\",\n  \"shirt\",\n  \"shown\",\n  \"sight\",\n  \"since\",\n  \"sized\",\n  \"sorry\",\n  \"spend\",\n  \"spent\",\n  \"stand\",\n  \"stock\",\n  \"stuff\",\n  \"style\",\n  \"taken\",\n  \"taxes\",\n  \"teeth\",\n  \"thank\",\n  \"theft\",\n  \"their\",\n  \"theme\",\n  \"thick\",\n  \"think\",\n  \"third\",\n  \"threw\",\n  \"tight\",\n  \"title\",\n  \"total\",\n  \"track\",\n  \"train\",\n  \"trend\",\n  \"truck\",\n  \"truly\",\n  \"truth\",\n  \"twice\",\n  \"undue\",\n  \"union\",\n  \"unity\",\n  \"upper\",\n  \"valid\",\n  \"value\",\n  \"video\",\n  \"virus\",\n  \"visit\",\n  \"vital\",\n  \"voice\",\n  \"watch\",\n  \"water\",\n  \"wheel\",\n  \"which\",\n  \"while\",\n  \"whole\",\n  \"woman\",\n  \"women\",\n  \"world\",\n  \"worry\",\n  \"would\",\n  \"wound\",\n  \"write\",\n  \"young\",\n  \"youth\",\n];\n","export class Bytes {\n  private byteList: string[] = [];\n  private index: number = 0;\n\n  public shuffle(array: string[]) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n  public constructor(byteList: string[], index?: number) {\n    console.log(\"this should be called only once\");\n    this.byteList = this.shuffle(byteList);\n    this.index = index ? index : 0;\n  }\n\n  public getNextWord(): string {\n    const nextWord = this.byteList[this.index];\n    this.index = (this.index + 1) % this.byteList.length;\n    return nextWord;\n  }\n}\n","// Snake metadata\n\nexport interface ISnakeEnds {\n  tail: { row: number; col: number };\n  head: { row: number; col: number };\n}\n\nexport class Snake {\n  private snakeEnds: ISnakeEnds;\n\n  public constructor(snakeEnds?: ISnakeEnds) {\n    if (snakeEnds) {\n      this.snakeEnds = snakeEnds;\n      return;\n    }\n\n    this.snakeEnds = {\n      tail: { row: 5, col: 5 },\n      head: { row: 5, col: 10 },\n    };\n  }\n\n  public getSnakeEnds(): ISnakeEnds {\n    return this.snakeEnds;\n  }\n\n  public setSnakeEnds(snakeEnds: ISnakeEnds): void {\n    this.snakeEnds = snakeEnds;\n  }\n\n  public snakeAlive(): boolean {\n    // TBD check if the snake head is not collided with a body/tail\n    return true;\n  }\n\n  public snakeLength(): number {\n    // TBD - return the number of grid locations\n    return 4;\n  }\n}\n","import React from \"react\";\nimport { Byte } from \"./byte\";\nimport { Direction, Role } from \"./grid\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  role: Role;\n  letter: string;\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  const {\n    role,\n    letter,\n    currentHeadDirection,\n    currentTailDirection,\n    currentTailPivot,\n  } = props;\n\n  const getClassNameFromDirection = (dir: Direction) => {\n    switch (dir) {\n      case Direction.Down:\n        return \"t2b\";\n      case Direction.Up:\n        return \"b2t\";\n      case Direction.Left:\n        return \"r2l\";\n      case Direction.Right:\n        return \"l2r\";\n      case Direction.None:\n        return \"none\";\n      default:\n        throw new Error(\"invalid dir\");\n    }\n  };\n\n  const getClassName = (): string => {\n    switch (role) {\n      case Role.FirstTail:\n      case Role.Canvas:\n        return \"box\";\n      case Role.Head:\n        return `head_${getClassNameFromDirection(currentHeadDirection)}`;\n      case Role.FirstHead:\n        return \"head_none\";\n      case Role.Body:\n        return \"snake\";\n      case Role.Tail:\n        return `tail_${getClassNameFromDirection(\n          currentTailPivot !== Direction.None\n            ? currentTailPivot\n            : currentTailDirection\n        )}`;\n      case Role.Byte:\n        return \"food\";\n      default:\n        throw new Error(\"invalid role\");\n    }\n  };\n\n  let className = getClassName();\n\n  return className === \"food\" ? (\n    <div className={className}>\n      <Byte letter={letter} />\n    </div>\n  ) : (\n    <div className={className}></div>\n  );\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction, IGridItem } from \"./grid\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: IGridItem[][];\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentHeadDirection, currentTailDirection, currentTailPivot } =\n    props;\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((item, index) => (\n        <Box\n          role={item.role}\n          letter={item.letter}\n          id={index}\n          key={index}\n          currentHeadDirection={currentHeadDirection}\n          currentTailDirection={currentTailDirection}\n          currentTailPivot={currentTailPivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import { IGridItem, Role, Direction } from \"../grid\";\nimport \"../style/debug/debugBox.css\";\n\nconst getStringRole = (role: Role): string => {\n  switch (role) {\n    case Role.Body:\n      return \"b \";\n    case Role.Head:\n      return \"h \";\n    case Role.Tail:\n      return \"t \";\n    case Role.Canvas:\n      return \"c \";\n    case Role.Byte:\n      return \"f \";\n    default:\n      throw new Error(\"invalid role\");\n  }\n};\n\nconst getStringDirection = (direction: Direction): string => {\n  switch (direction) {\n    case Direction.Down:\n      return \"d \";\n    case Direction.Up:\n      return \"u \";\n    case Direction.Left:\n      return \"l \";\n    case Direction.Right:\n      return \"r \";\n    case Direction.None:\n      return \"n \";\n    default:\n      throw new Error(\"invalid direction\");\n  }\n};\n\nexport const DebugBox: React.FunctionComponent<IGridItem> = (props) => {\n  const { role, direction, pivot } = props;\n  return (\n    <div className={\"debugBox\"}>\n      {role > 0 ? getStringRole(role) : null}\n      {direction > 0 ? getStringDirection(direction) : null}\n      {role > 0 ? getStringDirection(pivot).toUpperCase() : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DebugBox } from \"./debugBox\";\nimport { IGridItem } from \"../grid\";\n\nimport \"../style/debug/debugGrid.css\";\n\ninterface IDebugGridProps {\n  grid: IGridItem[][];\n}\n\nexport const DebugGrid: React.FunctionComponent<IDebugGridProps> = (props) => {\n  const { grid } = props;\n  return (\n    <div className={\"debugGrid\"}>\n      {grid.flat().map((item, index) => (\n        <DebugBox\n          key={index}\n          role={item.role}\n          letter={item.letter}\n          direction={item.direction}\n          pivot={item.pivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import \"./style/wordTiles.css\";\nimport \"./style/tile.css\";\nimport React from \"react\";\ninterface IWordTileProps {\n  bytes: string;\n}\nexport const WordTiles: React.FunctionComponent<IWordTileProps> = React.memo(\n  (props: IWordTileProps) => {\n    return (\n      <div className={\"wordTilesContainer\"}>\n        {[...props.bytes].map((letter, index) => (\n          <div key={index} className={\"tile\"}>\n            {letter}\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n","import React, { useCallback, useEffect, useState } from \"react\";\n//import { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { Grid, Direction, Role } from \"./grid\";\nimport { DebugGrid } from \"./debug/debugGrid\";\nimport \"./style/gridContainer.css\";\nimport { WordTiles } from \"./wordtiles\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst tickCount = rootStyle.getPropertyValue(\"--tick\");\nconst tickCountMs =\n  parseFloat(tickCount.substr(0, tickCount.length - 1)) * 1000;\n\nconst url: URL = new URL(window.location.href);\nconst urlSearchParams = new URLSearchParams(url.search);\n\nconst gridObj = new Grid();\ngridObj.initGridData();\n\nconst gridSize = gridObj.getGridSize();\nconst grid = gridObj.getGrid();\n\ninterface IGridContainer {\n  modalTitle: string;\n}\nexport const GridContainer: React.FunctionComponent<IGridContainer> = (\n  props\n) => {\n  const { modalTitle } = props;\n  const [snakeEnds, setSnakeEnds] = useState(gridObj.getSnake().getSnakeEnds());\n  const [playing, setPlaying] = useState(false);\n  const [debug, setDebug] = useState(false);\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n  let movePending = false;\n  // add logic in these to detect game end\n  const onSwipedLeft = () => {\n    if (movePending) return;\n\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Left);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Left);\n    movePending = true;\n  };\n\n  const onSwipedRight = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Right);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Right);\n    movePending = true;\n  };\n\n  const onSwipedUp = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Up);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Up);\n    movePending = true;\n  };\n\n  const onSwipedDown = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Down);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Down);\n    movePending = true;\n  };\n\n  const calculateNewHead = (ends: typeof snakeEnds) => {\n    /* ========================= HEAD ==============================*/\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n\n    grid[currentHeadRow][currentHeadCol].role = Role.Body; // make current head -> snake body\n    grid[currentHeadRow][currentHeadCol].direction = Direction.None; // make current head's dir none\n\n    // now calculate the new position (row, col) for head based on the current head direction.\n    let newHeadRow = currentHeadRow;\n    let newHeadCol = currentHeadCol;\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newHeadRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newHeadRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newHeadCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newHeadCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        const error = \"Invalid head direction!\";\n        alert(error);\n        throw new Error(error);\n      }\n    }\n    ends.head.row = newHeadRow;\n    ends.head.col = newHeadCol;\n\n    // check if new Head is a valid role\n    switch (grid[newHeadRow][newHeadCol].role) {\n      case Role.Tail:\n      case Role.Canvas: {\n        grid[newHeadRow][newHeadCol].role = Role.Head; // canvas -> head'\n        break;\n      }\n      case Role.Byte: {\n        const expected = gridObj.getExpectedLetter().toUpperCase();\n        const landed = grid[newHeadRow][newHeadCol].letter;\n\n        if (landed !== expected) {\n          const error = `Wrong letter, expected = ${expected}, letter = ${landed}`;\n          alert(error);\n          throw new Error(error);\n        }\n\n        const currentByteSequence =\n          gridObj.getLetterIndex() > 0 ? currentLetter + landed : landed;\n        setCurrentLetter(currentByteSequence);\n\n        gridObj.incrementLetterIndex();\n        if (gridObj.getLetterIndex() === 0) {\n          gridObj.setRandomBytePositions();\n        }\n\n        break;\n      }\n      default:\n        setPlaying(false);\n        const error = `Head collision with invalid role , ${grid[newHeadRow][newHeadCol].role}`;\n        alert(error);\n        throw new Error(error);\n    }\n\n    grid[newHeadRow][newHeadCol].direction = currentHeadDir; // retain previous head's dir in the new head\n  };\n\n  const isHeadOnByte = (ends: typeof snakeEnds): boolean => {\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    return grid[currentHeadRow][currentHeadCol].role === Role.Byte;\n  };\n\n  const calculateNewTail = (ends: typeof snakeEnds) => {\n    // no-op if the head is on a byte\n    if (isHeadOnByte(snakeEnds)) {\n      return;\n    }\n\n    /* ========================= TAIL ==============================*/\n    const currentTailRow = snakeEnds.tail.row;\n    const currentTailCol = snakeEnds.tail.col;\n    const pivotDir = grid[currentTailRow][currentTailCol].pivot;\n    // override current tail direction if there is a pivot direction left behind by the head at some point.\n    const currentTailDir =\n      pivotDir !== Direction.None\n        ? pivotDir\n        : gridObj.getCurrentTailDirection();\n\n    grid[currentTailRow][currentTailCol].role = Role.Canvas; // tail -> canvas\n    grid[currentTailRow][currentTailCol].direction = Direction.None; // tail -> canvas dir\n\n    if (pivotDir !== Direction.None)\n      grid[currentTailRow][currentTailCol].pivot = Direction.None; // clear pivots as the tail arrives\n\n    let newTailRow = currentTailRow;\n    let newTailCol = currentTailCol;\n\n    // now calculate the new position (row, col) for tail based on the current tail direction.\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newTailRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newTailRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newTailCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newTailCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        const error = \"Invalid tail direction!\";\n        alert(error);\n        throw new Error(error);\n      }\n    }\n\n    ends.tail.row = newTailRow;\n    ends.tail.col = newTailCol;\n    grid[newTailRow][newTailCol].role = Role.Tail; // body -> tail\n    grid[newTailRow][newTailCol].direction = currentTailDir;\n  };\n\n  // calcualte the new snake ends, and assign new roles as necessary\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    calculateNewTail(ends);\n    calculateNewHead(ends);\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    // set new roles on the new ends\n    const newEnds = getNewEnds(ends);\n    setSnakeEnds(newEnds);\n    // set new ends\n    gridObj.getSnake().setSnakeEnds(ends);\n    movePending = false;\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? tickCountMs : null\n  );\n\n  useEffect(() => {\n    if (modalTitle !== \"\") setPlaying(false);\n  }, [modalTitle]);\n\n  const handleOnPlayPauseGame = useCallback(() => {\n    if (modalTitle !== \"\") {\n      // pause and return\n      setPlaying(false);\n      return;\n    }\n\n    if (!playing) {\n      const currentTailDir = gridObj.getCurrentTailDirection();\n      const currentHeadDir = gridObj.getCurrentHeadDirection();\n      // on play first time\n      if (\n        currentHeadDir === Direction.None &&\n        currentTailDir === Direction.None\n      ) {\n        gridObj.setCurrentTailDirection(Direction.Right);\n        gridObj.setCurrentHeadDirection(Direction.Right);\n      }\n    }\n\n    setPlaying((playing) => !playing);\n  }, [playing, modalTitle]);\n\n  const handleOnDebug = useCallback(() => {\n    setDebug((debug) => !debug);\n  }, []);\n\n  const isDebugMode = () => {\n    return urlSearchParams.get(\"debug\") === \"true\";\n  };\n\n  const handlers = useSwipeable({\n    onSwipedLeft: onSwipedLeft,\n    onSwipedRight: onSwipedRight,\n    onSwipedDown: onSwipedDown,\n    onSwipedUp: onSwipedUp,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  return (\n    <div {...handlers} className={\"game\"}>\n      <div className={\"gridContainer\"}>\n        {debug ? (\n          <DebugGrid grid={grid} />\n        ) : (\n          <GridRenderer\n            grid={grid}\n            currentHeadDirection={gridObj.getCurrentHeadDirection()}\n            currentTailDirection={gridObj.getCurrentTailDirection()}\n            currentTailPivot={gridObj.getPivotDirectionOnCurrentTail()}\n          />\n        )}\n      </div>\n      {/* <div className={\"appUtils\"}>\n        {\n          <Button\n            onClick={handleOnPlayPauseGame}\n            label={playing ? \"Pause\" : \"Play\"}\n          />\n        }\n        {isDebugMode() ? (\n          <Button\n            onClick={handleOnDebug}\n            label={debug ? \"Debug Off\" : \"Debug On\"}\n          />\n        ) : null}\n      </div> */}\n      <WordTiles bytes={currentLetter} />\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/title.css\";\n\ninterface ITitleProps {\n  title: string;\n}\nexport const Title: React.FunctionComponent<ITitleProps> = React.memo(\n  (props) => {\n    return <div className=\"title\">{props.title}</div>;\n  }\n);\n","import React from \"react\";\nimport { Title } from \"./title\";\nimport \"./style/header.css\";\nimport { IconButton } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport {\n  SettingsRounded,\n  MenuRounded,\n  HelpRounded,\n  LeaderboardRounded,\n} from \"@mui/icons-material\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst fontColor = rootStyle.getPropertyValue(\"--fontColor\");\n\nconst outerTheme = createTheme({\n  palette: {\n    primary: {\n      main: fontColor.trim(), // hex versions of --var(fontColor)\n    },\n  },\n});\n\ninterface IHeader {\n  onClickInstructions: () => void;\n  onClickSettings: () => void;\n}\n\nexport const Header: React.FunctionComponent<IHeader> = (props) => {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <div className={\"header\"}>\n        <div className={\"menuleft\"}>\n          <IconButton aria-label=\"Menu\" color=\"primary\" size=\"small\">\n            <MenuRounded />\n          </IconButton>\n          <IconButton\n            aria-label=\"Instruction\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={props.onClickInstructions}\n          >\n            <HelpRounded />\n          </IconButton>\n        </div>\n        <Title title={\"Snake Bytes\"} />\n        <div className={\"menuright\"}>\n          <IconButton aria-label=\"Stats\" color=\"primary\" size=\"small\">\n            <LeaderboardRounded />\n          </IconButton>\n          <IconButton\n            aria-label=\"Settings\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={props.onClickSettings}\n          >\n            <SettingsRounded />\n          </IconButton>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport { Title } from \"../../title\";\nimport \"../../style/modalHeader.css\";\n\ninterface IModalHeader {\n  onClick: () => void;\n  title: string;\n}\nexport const ModalHeader: React.FunctionComponent<IModalHeader> = React.memo(\n  (props) => {\n    const { onClick, title } = props;\n    return (\n      <div className={\"modalHeader\"}>\n        <div className={\"titleContainer\"}>\n          <Title title={title} />\n        </div>\n        <button className={\"close\"} onClick={onClick}>\n          X\n        </button>\n      </div>\n    );\n  }\n);\n","import React, { useEffect, useState } from \"react\";\nimport \"../../style/modalPage.css\";\nimport { ModalHeader } from \"./modalHeader\";\n\ninterface IModalPage {\n  onClose: () => void;\n  title: string;\n}\n\nexport const ModalPage: React.FunctionComponent<IModalPage> = React.memo(\n  (props) => {\n    const { onClose, title } = props;\n    const [className, setClassName] = useState(\"closed\");\n\n    useEffect(() => {\n      setClassName(title !== \"\" ? \"modalOverlayIn\" : \"modalOverlayOut\");\n      if (title === \"\") {\n        setTimeout(() => setClassName(\"closed\"), 400);\n      }\n    }, [title]);\n\n    useEffect(() => {\n      setClassName(\"closed\");\n    }, []);\n\n    return (\n      <div className={className}>\n        <div className={\"modalContainer\"}>\n          <ModalHeader onClick={onClose} title={title} />\n          {props.children}\n        </div>\n      </div>\n    );\n  }\n);\n","export default __webpack_public_path__ + \"static/media/snakeSmile.c4c253be.gif\";","import snakeSmile from \"../../snakeSmile.gif\";\nimport \"../../style/instructions.css\";\n\nexport const instructions = (\n  <>\n    <p>Swipe anywhere on the screen to start the game.</p>\n    <p>\n      Navigate your snake by swiping left, right, up or down. This will change\n      the direction of the snake's head.\n    </p>\n    <p>\n      Steer the snake to capture the letters in the correct order and create a 5\n      letter word using the randomly placed letters. Score 100 points per word\n      solved + bonus points for speedy solutions.\n    </p>\n    <p>Avoid colliding the snake's head with it's own body.</p>\n\n    <img src={snakeSmile} alt={\"funny snake GIF\"} />\n  </>\n);\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport \"../../style/settings.css\";\nimport { styled } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nconst hintsLabel = { inputProps: { \"aria-label\": \"Hints\" } };\nconst colorModeLabel = { inputProps: { \"aria-label\": \"Dark mode\" } };\n\n// move this to a useEffect\nconst root = document.querySelector<HTMLElement>(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst switchColorMain = rootStyle.getPropertyValue(\"--foodColor\");\nconst switchColorLight = rootStyle.getPropertyValue(\"--snakeColor\");\n\nconst GreenSwitch = styled(Switch)(({ theme }) => ({\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\n    color: switchColorMain.trim(),\n  },\n  \"& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track\": {\n    backgroundColor: switchColorMain.trim(),\n  },\n  \"& .MuiSwitch-track\": {\n    backgroundColor: switchColorLight.trim(),\n  },\n}));\n\nexport const Settings: React.FunctionComponent = () => {\n  const [hintsChecked, setHintsChecked] = useState(true); // get from localStorage\n  const [darkModeChecked, setDarkModeChecked] = useState(true); // get from localStorage\n\n  useEffect(() => {\n    console.log(\n      `darkModeChecked  = \",\n      ${darkModeChecked}\n      ${rootStyle.getPropertyValue(\"--darkBackground\").trim()}`\n    );\n\n    if (darkModeChecked) {\n      root.style.setProperty(\n        \"--appBackgroundColor\",\n        rootStyle.getPropertyValue(\"--darkBackground\").trim()\n      );\n      root.style.setProperty(\n        \"--fontColor\",\n        rootStyle.getPropertyValue(\"--darkFont\").trim()\n      );\n      root.style.setProperty(\n        \"--boxBackgroundColor\",\n        rootStyle.getPropertyValue(\"--darkBox\").trim()\n      );\n    } else {\n      root.style.setProperty(\n        \"--appBackgroundColor\",\n        rootStyle.getPropertyValue(\"--lightBackground\").trim()\n      );\n      root.style.setProperty(\n        \"--fontColor\",\n        rootStyle.getPropertyValue(\"--lightFont\").trim()\n      );\n      root.style.setProperty(\n        \"--boxBackgroundColor\",\n        rootStyle.getPropertyValue(\"--lightBox\").trim()\n      );\n    }\n  }, [darkModeChecked]);\n\n  // todo : write to local storage\n  const handleHintsChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHintsChecked(event.target.checked);\n  };\n\n  // todo : write to local storage\n  const handleDarkModeChanged = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setDarkModeChecked(event.target.checked);\n  };\n\n  return (\n    <div className=\"settingsContainer\">\n      <div className=\"rowContainer\">\n        <div className=\"settingsTitleContainer\">\n          <div className=\"rowTitle\">{\"Hints\"}</div>\n        </div>\n        <GreenSwitch\n          {...hintsLabel}\n          checked={hintsChecked}\n          onChange={handleHintsChanged}\n        />\n      </div>\n      <div className=\"rowContainer\">\n        <div className=\"settingsTitleContainer\">\n          <div className=\"rowTitle\">{\"Dark mode\"}</div>\n        </div>\n        <GreenSwitch\n          {...colorModeLabel}\n          checked={darkModeChecked}\n          onChange={handleDarkModeChanged}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./style/App.css\";\n\nimport { GridContainer } from \"./gridContainer\";\nimport { Header } from \"./header\";\nimport { ModalPage } from \"./components/modals/modalPage\";\nimport { instructions } from \"./components/modals/instructions\";\nimport { Settings } from \"./components/modals/settings\";\n\nconst ModalObj = {\n  None: { title: \"\", children: <></> },\n  About: { title: \"About\", children: null },\n  Instructions: { title: \"How to play\", children: instructions },\n  Stats: { title: \"Statistics\", children: null },\n  Setting: { title: \"Settings\", children: <Settings /> },\n};\n\nexport const App: React.FunctionComponent = () => {\n  const [modalType, setModalType] = useState<{\n    title: string;\n    children: JSX.Element;\n  }>(ModalObj.None);\n\n  const onClickInstructions = () => {\n    setModalType(ModalObj.Instructions);\n  };\n  const onClickSettings = () => {\n    setModalType(ModalObj.Setting);\n  };\n\n  const onCloseModal = () => {\n    setModalType(ModalObj.None);\n  };\n\n  return (\n    <div className={\"appContainer\"}>\n      <Header\n        onClickInstructions={onClickInstructions}\n        onClickSettings={onClickSettings}\n      />\n      <ModalPage onClose={onCloseModal} title={modalType.title}>\n        {modalType.children}\n      </ModalPage>\n      <GridContainer modalTitle={modalType.title} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}