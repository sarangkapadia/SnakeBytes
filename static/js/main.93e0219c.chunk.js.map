{"version":3,"sources":["gridContainer.tsx","title.tsx","score.tsx","button.tsx","box.tsx","gridRenderer.tsx","useInterval.tsx","App.tsx","index.tsx"],"names":["Direction","Title","Score","React","memo","props","currentScore","Button","className","onClick","label","Box","role","currentHeadDirection","getClassNameFromDirection","dir","Down","Up","Left","Right","Error","getClassName","GridRenderer","grid","flat","map","index","id","root","document","querySelector","rootStyle","getComputedStyle","gridSize","parseInt","getPropertyValue","snakeEndsInit","tail","row","col","head","Array","from","fill","currentHeadDir","currentTailDir","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","GridContainer","useState","snakeEnds","setSnakeEnds","playing","setPlaying","handlers","useSwipeable","preventDefaultTouchmoveEvent","trackMouse","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","setInterval","clearInterval","useInterval","ends","newCol","newRow","getNewEnds","handleOnNewGame","useCallback","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.93e0219c.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { Score } from \"./score\";\nimport { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\n\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\nlet gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\nconst snakeEndsInit = { tail: { row: 5, col: 5 }, head: { row: 8, col: 5 } };\n\n// init the grid\nlet grid: string[][] = Array.from(Array(gridSize), () =>\n  new Array(gridSize).fill(\"b\")\n);\ngrid[5][5] = \"t\";\ngrid[6][5] = grid[7][5] = \"s\";\ngrid[8][5] = \"h\";\n\n// decare the directions\nexport enum Direction {\n  Up = 1,\n  Down,\n  Right,\n  Left,\n}\n\nlet currentHeadDir = Direction.Down;\nlet currentTailDir = Direction.Down;\n\n// add logic in these to detect game end\nconst onSwipedLeft = () => {\n  currentHeadDir = Direction.Left;\n};\nconst onSwipedRight = () => {\n  currentHeadDir = Direction.Right;\n};\nconst onSwipedUp = () => {\n  currentHeadDir = Direction.Up;\n};\nconst onSwipedDown = () => {\n  currentHeadDir = Direction.Down;\n};\n\nexport const GridContainer: React.FunctionComponent = () => {\n  const [snakeEnds, setSnakeEnds] = useState(snakeEndsInit);\n  const [playing, setPlaying] = useState(false);\n\n  const handlers = useSwipeable({\n    onSwipedLeft: onSwipedLeft,\n    onSwipedRight: onSwipedRight,\n    onSwipedDown: onSwipedDown,\n    onSwipedUp: onSwipedUp,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    let newCol = snakeEnds.head.col;\n    let newRow = snakeEnds.head.row;\n    grid[newRow][newCol] = \"s\"; // make current head -> snake\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default:\n        throw new Error(\"Invalid head direction!\");\n    }\n    ends.head.row = newRow;\n    ends.head.col = newCol;\n\n    grid[newRow][newCol] = \"h\"; // b -> h\n    grid[snakeEnds.tail.row][snakeEnds.tail.col] = \"b\"; // t -> b\n\n    newCol = snakeEnds.tail.col;\n    newRow = snakeEnds.tail.row;\n\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default:\n        throw new Error(\"Invalid tail direction!\");\n    }\n\n    ends.tail.row = newRow;\n    ends.tail.col = newCol;\n    grid[newRow][newCol] = \"t\"; // s -> t\n\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    setSnakeEnds(getNewEnds(ends));\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? 600 : null\n  );\n\n  const handleOnNewGame = useCallback(() => {\n    setPlaying((playing) => !playing);\n  }, []);\n\n  return (\n    <div {...handlers}>\n      <GridRenderer grid={grid} currentHeadDirection={currentHeadDir} />\n      <div className={\"appUtils\"}>\n        <Score currentScore={0}></Score>\n        <Button\n          onClick={handleOnNewGame}\n          label={playing ? \"Stop Game\" : \"New Game\"}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Title: React.FunctionComponent = () => {\n  return <h2>SNAKE</h2>;\n};\n","import React from 'react';\n\ninterface IScoreProps{\n    currentScore:number;\n}\nexport const Score: React.FunctionComponent<IScoreProps> = React.memo((props) => {\n    return <h2>Score: {props.currentScore}</h2>\n});","import React from \"react\";\nimport \"./style/button.css\";\n\ninterface IButtonProps {\n  onClick: () => void;\n  label: string;\n}\n\nexport const Button: React.FunctionComponent<IButtonProps> = React.memo(\n  (props) => {\n    return (\n      <button className={\"newGame\"} onClick={props.onClick}>\n        {props.label}\n      </button>\n    );\n  }\n);\n","import React from \"react\";\nimport { Direction } from \"./gridContainer\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  role: string;\n  currentHeadDirection: Direction;\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  const { role, currentHeadDirection } = props;\n\n  const getClassNameFromDirection = (dir: Direction) => {\n    switch (dir) {\n      case Direction.Down:\n        return \"t2b\";\n      case Direction.Up:\n        return \"b2t\";\n      case Direction.Left:\n        return \"r2l\";\n      case Direction.Right:\n        return \"l2r\";\n      default:\n        throw new Error(\"invalid dir\");\n    }\n  };\n\n  const getClassName = (): string => {\n    switch (role) {\n      case \"b\":\n        return \"box\";\n      case \"h\":\n        return `head_${getClassNameFromDirection(currentHeadDirection)}`;\n      case \"s\":\n        return \"snake\";\n      case \"t\":\n        return `tail_${getClassNameFromDirection(currentHeadDirection)}`; // fix this to tail\n      case \"f\":\n        return \"food\";\n      default:\n        throw new Error(\"invalid role\");\n    }\n  };\n\n  let className = getClassName();\n\n  return <div className={className}></div>;\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction } from \"./gridContainer\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: string[][];\n  currentHeadDirection: Direction;\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentHeadDirection } = props;\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((role, index) => (\n        <Box\n          role={role}\n          id={index}\n          key={index}\n          currentHeadDirection={currentHeadDirection}\n        />\n      ))}\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/App.css\";\n\nimport { Title } from \"./title\";\nimport { GridContainer } from \"./gridContainer\";\n\nexport const App: React.FunctionComponent = () => {\n  return (\n    <div className={\"appContainer\"}>\n      <Title />\n      <GridContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}