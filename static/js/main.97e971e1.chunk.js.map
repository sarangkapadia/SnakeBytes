{"version":3,"sources":["grid.ts","byte.tsx","byteList.ts","bytes.ts","snake.ts","box.tsx","gridRenderer.tsx","debug/debugBox.tsx","debug/debugGrid.tsx","wordtiles.tsx","gridContainer.tsx","useInterval.tsx","title.tsx","header.tsx","components/modals/modalHeader.tsx","components/modals/modalPage.tsx","snakeSmile.gif","components/modals/instructions.tsx","components/modals/settings.tsx","App.tsx","launchSettings.ts","index.tsx"],"names":["Direction","Role","Byte","React","memo","props","letter","className","byteList","Bytes","index","storageByteList","localStorage","getItem","this","JSON","parse","shuffle","setItem","stringify","storageIndex","array","console","log","randomIndex","currentIndex","length","Math","floor","random","nextWord","Snake","snakeEnds","tail","row","col","head","GridItem","role","Canvas","direction","None","pivot","Grid","grid","gridSize","snake","bytes","currentBytes","letterIndex","hintsPerWord","hintList","root","document","querySelector","rootStyle","getComputedStyle","parseInt","getPropertyValue","Array","i","j","getSnakeEnds","FirstTail","FirstHead","Body","Error","setRandomBytePositions","getNextWord","randomRow","randomCol","charAt","toUpperCase","column","getLetterIndex","HintedByte","Box","currentHeadDirection","currentTailDirection","currentTailPivot","getClassNameFromDirection","dir","Down","Up","Left","Right","Head","Tail","getClassName","GridRenderer","flat","map","item","id","getStringRole","getStringDirection","DebugBox","DebugGrid","WordTiles","score","toString","digit","tickCount","tickCountMs","parseFloat","substr","url","URL","window","location","href","gridObj","URLSearchParams","search","initGridData","getGridSize","getGrid","GridContainer","modalTitle","useState","getSnake","setSnakeEnds","playing","setPlaying","debug","setDebug","currentLetter","setCurrentLetter","movePending","hints","hintsOn","hintsTimeOutId","useRef","startDate","calculateNewHead","ends","currentHeadRow","currentHeadCol","currentHeadDir","getCurrentHeadDirection","newHeadRow","newHeadCol","error","alert","expected","getExpectedLetter","landed","currentByteSequence","incrementLetterIndex","endDate","Date","seconds","abs","getTime","current","bonus","calculateScore","resetHintTimer","getHintsPerWord","calculateNewTail","isHeadOnByte","currentTailRow","currentTailCol","pivotDir","currentTailDir","getCurrentTailDirection","newTailRow","newTailCol","callback","delay","savedCallback","useLayoutEffect","useEffect","setInterval","clearInterval","useInterval","newEnds","getNewEnds","useCallback","clearTimeout","resetHint","setTimeout","onHintTimer","setHint","handleOnPlayPauseGame","setCurrentTailDirection","setCurrentHeadDirection","handlers","useSwipeable","onSwipedLeft","setPivotOnCurrentHeadDirection","onSwipedRight","onSwipedDown","onSwipedUp","preventDefaultTouchmoveEvent","trackMouse","getPivotDirectionOnCurrentTail","Title","title","Header","outerTheme","createTheme","palette","primary","main","trim","ThemeProvider","theme","IconButton","color","size","MenuRounded","onClick","onClickInstructions","HelpRounded","LeaderboardRounded","onClickSettings","SettingsRounded","ModalHeader","ModalPage","onClose","setClassName","children","instructions","src","snakeSmile","alt","hintsLabel","inputProps","colorModeLabel","switchColorMain","switchColorLight","GreenSwitch","styled","Switch","backgroundColor","Settings","darkMode","hintsChecked","setHintsChecked","darkModeChecked","setDarkModeChecked","style","setProperty","checked","onChange","event","target","e","ModalObj","About","Instructions","Stats","Setting","isFirstVisit","isFirst","initLaunchSettings","App","modalType","setModalType","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.97e971e1.chunk.js","sourcesContent":["import { Bytes } from \"./bytes\";\nimport { Snake } from \"./snake\";\n\nexport enum Direction {\n  None,\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nexport enum Role {\n  Canvas,\n  Body,\n  Head,\n  Tail,\n  Byte,\n  HintedByte,\n  FirstHead,\n  FirstTail,\n}\n\nexport interface IGridItem {\n  role: Role;\n  direction: Direction;\n  pivot: Direction;\n  letter: string;\n}\n\nexport interface IHintItem {\n  row: number;\n  column: number;\n}\n\nclass GridItem implements IGridItem {\n  role = Role.Canvas;\n  direction = Direction.None;\n  pivot = Direction.None;\n  letter = \"\";\n}\n\nexport class Grid {\n  private grid: GridItem[][];\n  private gridSize: number;\n  private snake: Snake; // Grid contains a Snake\n\n  private bytes: Bytes; // Grid contains Bytes\n  private currentBytes: string = \"snake\";\n  private letterIndex: number = 0;\n  private hintsPerWord: number = 2;\n  private hintList: IHintItem[];\n\n  public constructor() {\n    const root = document.querySelector(\":root\")!;\n    const rootStyle = getComputedStyle(root);\n    this.gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\n    this.bytes = new Bytes();\n\n    this.grid = new Array(this.gridSize);\n    for (let i = 0; i < this.gridSize; i++) {\n      this.grid[i] = new Array(this.gridSize);\n    }\n\n    for (let i = 0; i < this.gridSize; i++) {\n      for (let j = 0; j < this.gridSize; j++) {\n        this.grid[i][j] = new GridItem();\n      }\n    }\n\n    this.snake = new Snake();\n    this.hintList = new Array(this.hintsPerWord);\n  }\n\n  public getGrid(): GridItem[][] {\n    return this.grid;\n  }\n\n  public getGridSize(): number {\n    return this.gridSize;\n  }\n\n  public getSnake(): Snake {\n    return this.snake;\n  }\n\n  public getCurrentHeadDirection(): Direction {\n    const { head } = this.snake.getSnakeEnds();\n    return this.grid[head.row][head.col].direction;\n  }\n\n  public getCurrentTailDirection(): Direction {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].direction;\n  }\n\n  public setCurrentHeadDirection(direction: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].direction = direction;\n  }\n\n  public getPivotDirectionOnCurrentTail() {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].pivot;\n  }\n\n  public setCurrentTailDirection(direction: Direction) {\n    const { tail } = this.snake.getSnakeEnds();\n    this.grid[tail.row][tail.col].direction = direction;\n  }\n\n  setPivotOnCurrentHeadDirection(pivot: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].pivot = pivot;\n  }\n\n  public initGridData() {\n    const { tail, head } = this.snake.getSnakeEnds();\n\n    this.grid[tail.row][tail.col].direction = Direction.None;\n    this.grid[head.row][head.col].direction = Direction.None;\n\n    this.grid[tail.row][tail.col].role = Role.FirstTail;\n    this.grid[head.row][head.col].role = Role.FirstHead;\n\n    if (tail.row === head.row) {\n      // horizontal snake\n      for (let i = tail.col + 1; i < head.col; i++) {\n        this.grid[tail.row][i].role = Role.Body;\n        this.grid[head.row][i].role = Role.Body;\n      }\n    } else if (tail.col === head.col) {\n      // vertical snake\n      for (let i = tail.row + 1; i < head.row; i++) {\n        this.grid[i][tail.col].role = Role.Body;\n        this.grid[i][tail.col].role = Role.Body;\n      }\n    } else {\n      throw new Error(\"Snake init invalid\");\n    }\n    this.setRandomBytePositions();\n  }\n\n  // sprinkles the next word on the grid\n  public setRandomBytePositions() {\n    this.currentBytes = this.bytes.getNextWord();\n    for (let i = 0; i < this.currentBytes.length; i++) {\n      do {\n        let randomRow = Math.floor(Math.random() * this.gridSize);\n        let randomCol = Math.floor(Math.random() * this.gridSize);\n\n        if (this.grid[randomRow][randomCol].role === Role.Canvas) {\n          this.grid[randomRow][randomCol].role = Role.Byte;\n          this.grid[randomRow][randomCol].letter = this.currentBytes\n            .charAt(i)\n            .toUpperCase();\n\n          if (i < this.hintsPerWord)\n            this.hintList[i] = { row: randomRow, column: randomCol };\n\n          break;\n        } else {\n          console.log(\"Invalid random position\");\n        }\n      } while (1);\n    }\n  }\n\n  public getLetterIndex(): number {\n    return this.letterIndex;\n  }\n\n  public incrementLetterIndex() {\n    // increment index in a circular manner 0-4 and back to 0\n    this.letterIndex = (this.letterIndex + 1) % this.currentBytes.length;\n  }\n\n  public getExpectedLetter(): string {\n    const expected = this.currentBytes.charAt(this.letterIndex);\n    return expected;\n  }\n\n  // set the role of hinted byte on the lowest index\n  public setHint(): void {\n    const index = this.getLetterIndex();\n    if (index < this.hintsPerWord) {\n      this.grid[this.hintList[index].row][this.hintList[index].column].role =\n        Role.HintedByte;\n    }\n  }\n\n  public resetHint(): void {\n    for (let i = 0; i < this.hintsPerWord; i++) {\n      if (\n        this.grid[this.hintList[i].row][this.hintList[i].column].role ===\n        Role.HintedByte\n      )\n        this.grid[this.hintList[i].row][this.hintList[i].column].role =\n          Role.Byte;\n    }\n  }\n\n  public getHintsPerWord(): number {\n    return this.hintsPerWord;\n  }\n} // end of grid\n","import React from \"react\";\nimport \"./style/byte.css\";\n\ninterface IByteProps {\n  letter: string;\n}\nexport const Byte: React.FunctionComponent<IByteProps> = React.memo((props) => {\n  const { letter } = props;\n  return <div className=\"byteLetter\">{letter}</div>;\n});\n","export const byteList: string[] = [\n  \"about\",\n  \"above\",\n  \"actor\",\n  \"acute\",\n  \"admit\",\n  \"adopt\",\n  \"adult\",\n  \"after\",\n  \"again\",\n  \"agent\",\n  \"ahead\",\n  \"album\",\n  \"alive\",\n  \"allow\",\n  \"apart\",\n  \"apple\",\n  \"arena\",\n  \"array\",\n  \"audio\",\n  \"audit\",\n  \"avoid\",\n  \"award\",\n  \"aware\",\n  \"bases\",\n  \"basic\",\n  \"beach\",\n  \"begun\",\n  \"bench\",\n  \"birth\",\n  \"black\",\n  \"blind\",\n  \"block\",\n  \"booth\",\n  \"bound\",\n  \"brand\",\n  \"breed\",\n  \"bring\",\n  \"brown\",\n  \"build\",\n  \"built\",\n  \"buyer\",\n  \"cable\",\n  \"carry\",\n  \"catch\",\n  \"chair\",\n  \"chart\",\n  \"check\",\n  \"child\",\n  \"civil\",\n  \"claim\",\n  \"class\",\n  \"clear\",\n  \"click\",\n  \"clock\",\n  \"coach\",\n  \"count\",\n  \"court\",\n  \"cover\",\n  \"craft\",\n  \"cross\",\n  \"crowd\",\n  \"crown\",\n  \"curve\",\n  \"daily\",\n  \"dated\",\n  \"delay\",\n  \"depth\",\n  \"doubt\",\n  \"draft\",\n  \"drawn\",\n  \"dress\",\n  \"drill\",\n  \"drink\",\n  \"eight\",\n  \"elite\",\n  \"empty\",\n  \"enemy\",\n  \"enjoy\",\n  \"entry\",\n  \"error\",\n  \"event\",\n  \"exact\",\n  \"extra\",\n  \"faith\",\n  \"fault\",\n  \"fight\",\n  \"final\",\n  \"fixed\",\n  \"flash\",\n  \"fleet\",\n  \"floor\",\n  \"fluid\",\n  \"focus\",\n  \"force\",\n  \"forum\",\n  \"frame\",\n  \"frank\",\n  \"fraud\",\n  \"fresh\",\n  \"front\",\n  \"fruit\",\n  \"fully\",\n  \"funny\",\n  \"given\",\n  \"going\",\n  \"grace\",\n  \"grand\",\n  \"grant\",\n  \"grass\",\n  \"gross\",\n  \"group\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"happy\",\n  \"heavy\",\n  \"hence\",\n  \"house\",\n  \"human\",\n  \"image\",\n  \"input\",\n  \"issue\",\n  \"joint\",\n  \"judge\",\n  \"known\",\n  \"label\",\n  \"laugh\",\n  \"leave\",\n  \"legal\",\n  \"level\",\n  \"light\",\n  \"limit\",\n  \"local\",\n  \"logic\",\n  \"loose\",\n  \"lucky\",\n  \"lunch\",\n  \"lying\",\n  \"magic\",\n  \"major\",\n  \"maker\",\n  \"match\",\n  \"metal\",\n  \"might\",\n  \"minor\",\n  \"mixed\",\n  \"model\",\n  \"money\",\n  \"month\",\n  \"motor\",\n  \"mouth\",\n  \"movie\",\n  \"music\",\n  \"newly\",\n  \"novel\",\n  \"occur\",\n  \"often\",\n  \"paper\",\n  \"party\",\n  \"peace\",\n  \"phone\",\n  \"photo\",\n  \"piece\",\n  \"pilot\",\n  \"pitch\",\n  \"place\",\n  \"plain\",\n  \"plant\",\n  \"pound\",\n  \"power\",\n  \"press\",\n  \"price\",\n  \"prime\",\n  \"print\",\n  \"prior\",\n  \"prize\",\n  \"proof\",\n  \"proud\",\n  \"queen\",\n  \"quick\",\n  \"rapid\",\n  \"ratio\",\n  \"reach\",\n  \"river\",\n  \"robin\",\n  \"rough\",\n  \"round\",\n  \"royal\",\n  \"rural\",\n  \"shell\",\n  \"shift\",\n  \"shirt\",\n  \"shown\",\n  \"sight\",\n  \"since\",\n  \"sized\",\n  \"sorry\",\n  \"spend\",\n  \"spent\",\n  \"stand\",\n  \"stock\",\n  \"stuff\",\n  \"style\",\n  \"taken\",\n  \"taxes\",\n  \"teeth\",\n  \"thank\",\n  \"theft\",\n  \"their\",\n  \"theme\",\n  \"thick\",\n  \"think\",\n  \"third\",\n  \"threw\",\n  \"tight\",\n  \"title\",\n  \"total\",\n  \"track\",\n  \"train\",\n  \"trend\",\n  \"truck\",\n  \"truly\",\n  \"truth\",\n  \"twice\",\n  \"undue\",\n  \"union\",\n  \"unity\",\n  \"upper\",\n  \"valid\",\n  \"value\",\n  \"video\",\n  \"virus\",\n  \"visit\",\n  \"vital\",\n  \"voice\",\n  \"watch\",\n  \"water\",\n  \"wheel\",\n  \"which\",\n  \"while\",\n  \"whole\",\n  \"woman\",\n  \"women\",\n  \"world\",\n  \"worry\",\n  \"would\",\n  \"wound\",\n  \"write\",\n  \"young\",\n  \"youth\",\n];\n","import { byteList } from \"./byteList\";\n\nexport class Bytes {\n  private byteList: string[] = [];\n  private index: number = 0;\n\n  public shuffle(array: string[]) {\n    console.log(\"this should be called only once\");\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n  public constructor() {\n    const storageByteList = localStorage.getItem(\"byteList\");\n    if (storageByteList) {\n      this.byteList = JSON.parse(storageByteList);\n    } else {\n      this.byteList = this.shuffle(byteList);\n      localStorage.setItem(\"byteList\", JSON.stringify(this.byteList));\n    }\n\n    const storageIndex = localStorage.getItem(\"byteIndex\");\n    if (storageIndex) {\n      this.index = JSON.parse(storageIndex);\n    } else {\n      this.index = 0;\n      localStorage.setItem(\"byteIndex\", JSON.stringify(this.index));\n    }\n  }\n\n  public getNextWord(): string {\n    const nextWord = this.byteList[this.index];\n    this.index = (this.index + 1) % this.byteList.length;\n    localStorage.setItem(\"byteIndex\", JSON.stringify(this.index));\n    return nextWord;\n  }\n}\n","// Snake metadata\n\nexport interface ISnakeEnds {\n  tail: { row: number; col: number };\n  head: { row: number; col: number };\n}\n\nexport class Snake {\n  private snakeEnds: ISnakeEnds;\n\n  public constructor(snakeEnds?: ISnakeEnds) {\n    if (snakeEnds) {\n      this.snakeEnds = snakeEnds;\n      return;\n    }\n\n    this.snakeEnds = {\n      tail: { row: 5, col: 5 },\n      head: { row: 5, col: 10 },\n    };\n  }\n\n  public getSnakeEnds(): ISnakeEnds {\n    return this.snakeEnds;\n  }\n\n  public setSnakeEnds(snakeEnds: ISnakeEnds): void {\n    this.snakeEnds = snakeEnds;\n  }\n\n  public snakeAlive(): boolean {\n    // TBD check if the snake head is not collided with a body/tail\n    return true;\n  }\n\n  public snakeLength(): number {\n    // TBD - return the number of grid locations\n    return 4;\n  }\n}\n","import React from \"react\";\nimport { Byte } from \"./byte\";\nimport { Direction, Role } from \"./grid\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  role: Role;\n  letter: string;\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  const {\n    role,\n    letter,\n    currentHeadDirection,\n    currentTailDirection,\n    currentTailPivot,\n  } = props;\n\n  const getClassNameFromDirection = (dir: Direction) => {\n    switch (dir) {\n      case Direction.Down:\n        return \"t2b\";\n      case Direction.Up:\n        return \"b2t\";\n      case Direction.Left:\n        return \"r2l\";\n      case Direction.Right:\n        return \"l2r\";\n      case Direction.None:\n        return \"none\";\n      default:\n        throw new Error(\"invalid dir\");\n    }\n  };\n\n  const getClassName = (): string => {\n    switch (role) {\n      case Role.FirstTail:\n      case Role.Canvas:\n        return \"box\";\n      case Role.Head:\n        return `head_${getClassNameFromDirection(currentHeadDirection)}`;\n      case Role.FirstHead:\n        return \"head_none\";\n      case Role.Body:\n        return \"snake\";\n      case Role.Tail:\n        return `tail_${getClassNameFromDirection(\n          currentTailPivot !== Direction.None\n            ? currentTailPivot\n            : currentTailDirection\n        )}`;\n      case Role.Byte:\n        return \"byte\";\n      case Role.HintedByte:\n        return \"hintedByte\";\n      default:\n        throw new Error(\"invalid role\");\n    }\n  };\n\n  let className = getClassName();\n\n  return className === \"byte\" || className === \"hintedByte\" ? (\n    <div className={className}>\n      <Byte letter={letter} />\n    </div>\n  ) : (\n    <div className={className}></div>\n  );\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction, IGridItem } from \"./grid\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: IGridItem[][];\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentHeadDirection, currentTailDirection, currentTailPivot } =\n    props;\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((item, index) => (\n        <Box\n          role={item.role}\n          letter={item.letter}\n          id={index}\n          key={index}\n          currentHeadDirection={currentHeadDirection}\n          currentTailDirection={currentTailDirection}\n          currentTailPivot={currentTailPivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import { IGridItem, Role, Direction } from \"../grid\";\nimport \"../style/debug/debugBox.css\";\n\nconst getStringRole = (role: Role): string => {\n  switch (role) {\n    case Role.Body:\n      return \"b \";\n    case Role.Head:\n      return \"h \";\n    case Role.Tail:\n      return \"t \";\n    case Role.Canvas:\n      return \"c \";\n    case Role.Byte:\n      return \"f \";\n    default:\n      throw new Error(\"invalid role\");\n  }\n};\n\nconst getStringDirection = (direction: Direction): string => {\n  switch (direction) {\n    case Direction.Down:\n      return \"d \";\n    case Direction.Up:\n      return \"u \";\n    case Direction.Left:\n      return \"l \";\n    case Direction.Right:\n      return \"r \";\n    case Direction.None:\n      return \"n \";\n    default:\n      throw new Error(\"invalid direction\");\n  }\n};\n\nexport const DebugBox: React.FunctionComponent<IGridItem> = (props) => {\n  const { role, direction, pivot } = props;\n  return (\n    <div className={\"debugBox\"}>\n      {role > 0 ? getStringRole(role) : null}\n      {direction > 0 ? getStringDirection(direction) : null}\n      {role > 0 ? getStringDirection(pivot).toUpperCase() : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DebugBox } from \"./debugBox\";\nimport { IGridItem } from \"../grid\";\n\nimport \"../style/debug/debugGrid.css\";\n\ninterface IDebugGridProps {\n  grid: IGridItem[][];\n}\n\nexport const DebugGrid: React.FunctionComponent<IDebugGridProps> = (props) => {\n  const { grid } = props;\n  return (\n    <div className={\"debugGrid\"}>\n      {grid.flat().map((item, index) => (\n        <DebugBox\n          key={index}\n          role={item.role}\n          letter={item.letter}\n          direction={item.direction}\n          pivot={item.pivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import \"./style/wordTiles.css\";\nimport \"./style/tile.css\";\nimport React from \"react\";\ninterface IWordTileProps {\n  bytes: string;\n  score: number;\n}\nexport const WordTiles: React.FunctionComponent<IWordTileProps> = React.memo(\n  (props: IWordTileProps) => {\n    return (\n      <div className={\"wordTilesContainer\"}>\n        <div className=\"tileContainer\">\n          {[...props.bytes].map((letter, index) => (\n            <div key={index} className={\"tileLetter\"}>\n              {letter}\n            </div>\n          ))}\n        </div>\n        {props.score > 0 ? (\n          <div className=\"tileContainer\">\n            {[...props.score.toString()].map((digit, index) => (\n              <div key={index} className={\"tileNumber\"}>\n                {digit}\n              </div>\n            ))}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n);\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\n//import { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { Grid, Direction, Role } from \"./grid\";\nimport { DebugGrid } from \"./debug/debugGrid\";\nimport \"./style/gridContainer.css\";\nimport { WordTiles } from \"./wordtiles\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst tickCount = rootStyle.getPropertyValue(\"--tick\");\nconst tickCountMs =\n  parseFloat(tickCount.substr(0, tickCount.length - 1)) * 1000;\n\nconst url: URL = new URL(window.location.href);\nconst urlSearchParams = new URLSearchParams(url.search);\n\nconst gridObj = new Grid();\ngridObj.initGridData();\n\nconst gridSize = gridObj.getGridSize();\nconst grid = gridObj.getGrid();\n\nconst pointsPerWord = 10;\nlet score = 0;\nconst hintTimeoutMs = 14 * 1000;\n\ninterface IGridContainer {\n  modalTitle: string;\n}\nexport const GridContainer: React.FunctionComponent<IGridContainer> = (\n  props\n) => {\n  const { modalTitle } = props;\n  const [snakeEnds, setSnakeEnds] = useState(gridObj.getSnake().getSnakeEnds());\n  const [playing, setPlaying] = useState(false);\n  const [debug, setDebug] = useState(false);\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n  let movePending = false;\n  const hints = localStorage.getItem(\"hints\");\n  const hintsOn = hints ? JSON.parse(hints) : \"true\";\n  let hintsTimeOutId: any = useRef(null);\n  let startDate: any = useRef(null);\n  // add logic in these to detect game end\n  const onSwipedLeft = () => {\n    if (movePending) return;\n\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Left);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Left);\n    movePending = true;\n  };\n\n  const onSwipedRight = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Right);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Right);\n    movePending = true;\n  };\n\n  const onSwipedUp = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Up);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Up);\n    movePending = true;\n  };\n\n  const onSwipedDown = () => {\n    if (movePending) return;\n    if (!playing) {\n      handleOnPlayPauseGame();\n      return;\n    }\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Down);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Down);\n    movePending = true;\n  };\n\n  const calculateScore = () => {\n    const endDate = new Date();\n    const seconds = Math.abs(\n      (endDate.getTime() - startDate.current.getTime()) / 1000\n    );\n    const bonus = Math.floor(100 / seconds);\n    score += pointsPerWord;\n    score += bonus >= 2 ? bonus : 0; //min bonus of 2 is needed.\n    // refresh the new start date\n    startDate.current = new Date();\n  };\n\n  const calculateNewHead = (ends: typeof snakeEnds) => {\n    /* ========================= HEAD ==============================*/\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n\n    grid[currentHeadRow][currentHeadCol].role = Role.Body; // make current head -> snake body\n    grid[currentHeadRow][currentHeadCol].direction = Direction.None; // make current head's dir none\n\n    // now calculate the new position (row, col) for head based on the current head direction.\n    let newHeadRow = currentHeadRow;\n    let newHeadCol = currentHeadCol;\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newHeadRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newHeadRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newHeadCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newHeadCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        const error = \"Invalid head direction!\";\n        alert(error);\n        throw new Error(error);\n      }\n    }\n    ends.head.row = newHeadRow;\n    ends.head.col = newHeadCol;\n\n    // check if new Head is a valid role\n    switch (grid[newHeadRow][newHeadCol].role) {\n      case Role.Tail:\n      case Role.Canvas: {\n        grid[newHeadRow][newHeadCol].role = Role.Head; // canvas -> head'\n        break;\n      }\n      case Role.HintedByte:\n      case Role.Byte: {\n        const expected = gridObj.getExpectedLetter().toUpperCase();\n        const landed = grid[newHeadRow][newHeadCol].letter;\n\n        if (landed !== expected) {\n          const error = `Wrong letter, expected = ${expected}, letter = ${landed}`;\n          alert(error);\n          throw new Error(error);\n        }\n\n        const currentByteSequence =\n          gridObj.getLetterIndex() > 0 ? currentLetter + landed : landed;\n        setCurrentLetter(currentByteSequence);\n\n        gridObj.incrementLetterIndex();\n\n        // new word\n        const letterIndex = gridObj.getLetterIndex();\n        if (letterIndex === 0) {\n          gridObj.setRandomBytePositions();\n\n          calculateScore();\n          resetHintTimer();\n        } else if (letterIndex <= gridObj.getHintsPerWord()) {\n          resetHintTimer();\n        }\n        break;\n      }\n      default:\n        setPlaying(false);\n        const error = `Head collision with invalid role , ${grid[newHeadRow][newHeadCol].role}`;\n        alert(error);\n        throw new Error(error);\n    }\n\n    grid[newHeadRow][newHeadCol].direction = currentHeadDir; // retain previous head's dir in the new head\n  };\n\n  const isHeadOnByte = (ends: typeof snakeEnds): boolean => {\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    return grid[currentHeadRow][currentHeadCol].role === Role.Byte;\n  };\n\n  const calculateNewTail = (ends: typeof snakeEnds) => {\n    // no-op if the head is on a byte\n    if (isHeadOnByte(snakeEnds)) {\n      return;\n    }\n\n    /* ========================= TAIL ==============================*/\n    const currentTailRow = snakeEnds.tail.row;\n    const currentTailCol = snakeEnds.tail.col;\n    const pivotDir = grid[currentTailRow][currentTailCol].pivot;\n    // override current tail direction if there is a pivot direction left behind by the head at some point.\n    const currentTailDir =\n      pivotDir !== Direction.None\n        ? pivotDir\n        : gridObj.getCurrentTailDirection();\n\n    grid[currentTailRow][currentTailCol].role = Role.Canvas; // tail -> canvas\n    grid[currentTailRow][currentTailCol].direction = Direction.None; // tail -> canvas dir\n\n    if (pivotDir !== Direction.None)\n      grid[currentTailRow][currentTailCol].pivot = Direction.None; // clear pivots as the tail arrives\n\n    let newTailRow = currentTailRow;\n    let newTailCol = currentTailCol;\n\n    // now calculate the new position (row, col) for tail based on the current tail direction.\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newTailRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newTailRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newTailCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newTailCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        const error = \"Invalid tail direction!\";\n        alert(error);\n        throw new Error(error);\n      }\n    }\n\n    ends.tail.row = newTailRow;\n    ends.tail.col = newTailCol;\n    grid[newTailRow][newTailCol].role = Role.Tail; // body -> tail\n    grid[newTailRow][newTailCol].direction = currentTailDir;\n  };\n\n  // calcualte the new snake ends, and assign new roles as necessary\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    calculateNewTail(ends);\n    calculateNewHead(ends);\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    // set new roles on the new ends\n    const newEnds = getNewEnds(ends);\n    setSnakeEnds(newEnds);\n    // set new ends\n    gridObj.getSnake().setSnakeEnds(ends);\n    movePending = false;\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? tickCountMs : null\n  );\n\n  const resetHintTimer = useCallback(() => {\n    clearTimeout(hintsTimeOutId.current);\n    gridObj.resetHint();\n    const letterIndex = gridObj.getLetterIndex();\n    if (hintsOn && letterIndex < gridObj.getHintsPerWord()) {\n      hintsTimeOutId.current = setTimeout(onHintTimer, hintTimeoutMs);\n    }\n  }, [hintsOn]);\n\n  useEffect(() => {\n    if (modalTitle !== \"\") {\n      clearTimeout(hintsTimeOutId.current);\n      setPlaying(false);\n    }\n    if (!hintsOn) {\n      resetHintTimer();\n    }\n  }, [modalTitle, hintsOn, resetHintTimer]);\n\n  const onHintTimer = () => {\n    gridObj.setHint();\n  };\n\n  const handleOnPlayPauseGame = useCallback(() => {\n    if (modalTitle !== \"\") {\n      // pause and return\n      setPlaying(false);\n      return;\n    }\n\n    if (!playing) {\n      const currentTailDir = gridObj.getCurrentTailDirection();\n      const currentHeadDir = gridObj.getCurrentHeadDirection();\n      // on play first time\n      if (\n        currentHeadDir === Direction.None &&\n        currentTailDir === Direction.None\n      ) {\n        gridObj.setCurrentTailDirection(Direction.Right);\n        gridObj.setCurrentHeadDirection(Direction.Right);\n      }\n      if (!startDate.current) startDate.current = new Date();\n      resetHintTimer();\n    }\n    setPlaying((playing) => !playing);\n  }, [playing, modalTitle, resetHintTimer]);\n\n  const handleOnDebug = useCallback(() => {\n    setDebug((debug) => !debug);\n  }, []);\n\n  const isDebugMode = () => {\n    return urlSearchParams.get(\"debug\") === \"true\";\n  };\n\n  const handlers = useSwipeable({\n    onSwipedLeft: onSwipedLeft,\n    onSwipedRight: onSwipedRight,\n    onSwipedDown: onSwipedDown,\n    onSwipedUp: onSwipedUp,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  return (\n    <div {...handlers} className={\"game\"}>\n      <div className={\"gridContainer\"}>\n        {debug ? (\n          <DebugGrid grid={grid} />\n        ) : (\n          <GridRenderer\n            grid={grid}\n            currentHeadDirection={gridObj.getCurrentHeadDirection()}\n            currentTailDirection={gridObj.getCurrentTailDirection()}\n            currentTailPivot={gridObj.getPivotDirectionOnCurrentTail()}\n          />\n        )}\n        <WordTiles bytes={currentLetter} score={score} />\n      </div>\n\n      {/* <div className={\"appUtils\"}>\n        {\n          <Button\n            onClick={handleOnPlayPauseGame}\n            label={playing ? \"Pause\" : \"Play\"}\n          />\n        }\n        {isDebugMode() ? (\n          <Button\n            onClick={handleOnDebug}\n            label={debug ? \"Debug Off\" : \"Debug On\"}\n          />\n        ) : null}\n      </div> */}\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/title.css\";\n\ninterface ITitleProps {\n  title: string;\n}\nexport const Title: React.FunctionComponent<ITitleProps> = React.memo(\n  (props) => {\n    return <div className=\"title\">{props.title}</div>;\n  }\n);\n","import React from \"react\";\nimport { Title } from \"./title\";\nimport \"./style/header.css\";\nimport { IconButton } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport {\n  SettingsRounded,\n  MenuRounded,\n  HelpRounded,\n  LeaderboardRounded,\n} from \"@mui/icons-material\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\ninterface IHeader {\n  onClickInstructions: () => void;\n  onClickSettings: () => void;\n}\n\nexport const Header: React.FunctionComponent<IHeader> = (props) => {\n  const outerTheme = createTheme({\n    palette: {\n      primary: {\n        main: rootStyle.getPropertyValue(\"--fontColor\").trim(), // hex versions of --var(fontColor)\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <div className={\"header\"}>\n        <div className={\"menuleft\"}>\n          <IconButton aria-label=\"Menu\" color=\"primary\" size=\"small\">\n            <MenuRounded />\n          </IconButton>\n          <IconButton\n            aria-label=\"Instruction\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={props.onClickInstructions}\n          >\n            <HelpRounded />\n          </IconButton>\n        </div>\n        <Title title={\"Snakespeare\"} />\n        <div className={\"menuright\"}>\n          <IconButton aria-label=\"Stats\" color=\"primary\" size=\"small\">\n            <LeaderboardRounded />\n          </IconButton>\n          <IconButton\n            aria-label=\"Settings\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={props.onClickSettings}\n          >\n            <SettingsRounded />\n          </IconButton>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport { Title } from \"../../title\";\nimport \"../../style/modalHeader.css\";\n\ninterface IModalHeader {\n  onClick: () => void;\n  title: string;\n}\nexport const ModalHeader: React.FunctionComponent<IModalHeader> = React.memo(\n  (props) => {\n    const { onClick, title } = props;\n    return (\n      <div className={\"modalHeader\"}>\n        <div className={\"titleContainer\"}>\n          <Title title={title} />\n        </div>\n        <button className={\"close\"} onClick={onClick}>\n          X\n        </button>\n      </div>\n    );\n  }\n);\n","import React, { useEffect, useState } from \"react\";\nimport \"../../style/modalPage.css\";\nimport { ModalHeader } from \"./modalHeader\";\n\ninterface IModalPage {\n  onClose: () => void;\n  title: string;\n}\n\nexport const ModalPage: React.FunctionComponent<IModalPage> = React.memo(\n  (props) => {\n    const { onClose, title } = props;\n    const [className, setClassName] = useState(\"closed\");\n\n    useEffect(() => {\n      setClassName(title !== \"\" ? \"modalOverlayIn\" : \"modalOverlayOut\");\n      if (title === \"\") {\n        setTimeout(() => setClassName(\"closed\"), 400);\n      }\n    }, [title]);\n\n    return (\n      <div className={className}>\n        <div className={\"modalContainer\"}>\n          <ModalHeader onClick={onClose} title={title} />\n          {props.children}\n        </div>\n      </div>\n    );\n  }\n);\n","export default __webpack_public_path__ + \"static/media/snakeSmile.c4c253be.gif\";","import snakeSmile from \"../../snakeSmile.gif\";\nimport \"../../style/instructions.css\";\n\nexport const instructions = (\n  <>\n    <p>Swipe anywhere on the screen to start the game.</p>\n    <p>Make turns by swiping anywhere: up, down, left or right</p>\n    <p>\n      Steer the snake to capture the letters in the correct order and create a 5\n      letter word using the randomly placed letters.\n    </p>\n    <p>Score 10 points per word solved + bonus points for faster solutions.</p>\n\n    <p>Avoid colliding the snake's head with it's own body.</p>\n\n    <img src={snakeSmile} alt={\"funny snake GIF\"} />\n  </>\n);\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport \"../../style/settings.css\";\nimport { styled } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nconst hintsLabel = { inputProps: { \"aria-label\": \"Hints\" } };\nconst colorModeLabel = { inputProps: { \"aria-label\": \"Dark mode\" } };\n\n// move this to a useEffect\nconst root = document.querySelector<HTMLElement>(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst switchColorMain = rootStyle.getPropertyValue(\"--byteColor\");\nconst switchColorLight = rootStyle.getPropertyValue(\"--snakeColor\");\n\nconst GreenSwitch = styled(Switch)(({ theme }) => ({\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\n    color: switchColorMain.trim(),\n  },\n  \"& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track\": {\n    backgroundColor: switchColorMain.trim(),\n  },\n  \"& .MuiSwitch-track\": {\n    backgroundColor: switchColorLight.trim(),\n  },\n}));\n\nexport const Settings: React.FunctionComponent = () => {\n  const darkMode = localStorage.getItem(\"darkMode\");\n  const hints = localStorage.getItem(\"hints\");\n\n  const [hintsChecked, setHintsChecked] = useState(\n    hints ? JSON.parse(hints) : true\n  );\n  const [darkModeChecked, setDarkModeChecked] = useState(\n    darkMode ? JSON.parse(darkMode) : true\n  );\n\n  useEffect(() => {\n    if (darkModeChecked) {\n      root.style.setProperty(\n        \"--appBackgroundColor\",\n        rootStyle.getPropertyValue(\"--darkBackground\").trim()\n      );\n      root.style.setProperty(\n        \"--fontColor\",\n        rootStyle.getPropertyValue(\"--darkFont\").trim()\n      );\n      root.style.setProperty(\n        \"--boxBackgroundColor\",\n        rootStyle.getPropertyValue(\"--darkBox\").trim()\n      );\n    } else {\n      root.style.setProperty(\n        \"--appBackgroundColor\",\n        rootStyle.getPropertyValue(\"--lightBackground\").trim()\n      );\n      root.style.setProperty(\n        \"--fontColor\",\n        rootStyle.getPropertyValue(\"--lightFont\").trim()\n      );\n      root.style.setProperty(\n        \"--boxBackgroundColor\",\n        rootStyle.getPropertyValue(\"--lightBox\").trim()\n      );\n    }\n  }, [darkModeChecked]);\n\n  // todo : write to local storage\n  const handleHintsChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      localStorage.setItem(\"hints\", JSON.stringify(event.target.checked));\n    } catch (e) {\n      console.log(\"cannot write to localStorage \", e);\n    }\n    setHintsChecked(event.target.checked);\n  };\n\n  // todo : write to local storage\n  const handleDarkModeChanged = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    try {\n      localStorage.setItem(\"darkMode\", JSON.stringify(event.target.checked));\n    } catch (e) {\n      console.log(\"cannot write to localStorage \", e);\n    }\n    setDarkModeChecked(event.target.checked);\n  };\n\n  return (\n    <div className=\"settingsContainer\">\n      <div className=\"rowContainer\">\n        <div className=\"settingsTitleContainer\">\n          <div className=\"rowTitle\">{\"Hints\"}</div>\n        </div>\n        <GreenSwitch\n          {...hintsLabel}\n          checked={hintsChecked}\n          onChange={handleHintsChanged}\n        />\n      </div>\n      <div className=\"rowContainer\">\n        <div className=\"settingsTitleContainer\">\n          <div className=\"rowTitle\">{\"Dark mode\"}</div>\n        </div>\n        <GreenSwitch\n          {...colorModeLabel}\n          checked={darkModeChecked}\n          onChange={handleDarkModeChanged}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./style/App.css\";\n\nimport { GridContainer } from \"./gridContainer\";\nimport { Header } from \"./header\";\nimport { ModalPage } from \"./components/modals/modalPage\";\nimport { instructions } from \"./components/modals/instructions\";\nimport { Settings } from \"./components/modals/settings\";\nimport { initLaunchSettings } from \"./launchSettings\";\n\nconst ModalObj = {\n  None: { title: \"\", children: <></> },\n  About: { title: \"About\", children: null },\n  Instructions: { title: \"How to play\", children: instructions },\n  Stats: { title: \"Statistics\", children: null },\n  Setting: { title: \"Settings\", children: <Settings /> },\n};\n\nconst isFirstVisit = initLaunchSettings();\n\nexport const App: React.FunctionComponent = () => {\n  const [modalType, setModalType] = useState<{\n    title: string;\n    children: JSX.Element;\n  }>(isFirstVisit ? ModalObj.Instructions : ModalObj.None);\n\n  const onClickInstructions = () => {\n    setModalType(ModalObj.Instructions);\n  };\n  const onClickSettings = () => {\n    setModalType(ModalObj.Setting);\n  };\n\n  const onCloseModal = () => {\n    setModalType(ModalObj.None);\n  };\n\n  return (\n    <div className={\"appContainer\"}>\n      <Header\n        onClickInstructions={onClickInstructions}\n        onClickSettings={onClickSettings}\n      />\n      <ModalPage onClose={onCloseModal} title={modalType.title}>\n        {modalType.children}\n      </ModalPage>\n      <GridContainer modalTitle={modalType.title} />\n    </div>\n  );\n};\n","export const initLaunchSettings = () => {\n  const root = document.querySelector<HTMLElement>(\":root\")!;\n  const rootStyle = getComputedStyle(root);\n\n  const darkMode = localStorage.getItem(\"darkMode\");\n  const darkModeChecked = darkMode ? JSON.parse(darkMode) : true; // default turn on dark mode\n\n  if (darkModeChecked) {\n    root.style.setProperty(\n      \"--appBackgroundColor\",\n      rootStyle.getPropertyValue(\"--darkBackground\").trim()\n    );\n    root.style.setProperty(\n      \"--fontColor\",\n      rootStyle.getPropertyValue(\"--darkFont\").trim()\n    );\n    root.style.setProperty(\n      \"--boxBackgroundColor\",\n      rootStyle.getPropertyValue(\"--darkBox\").trim()\n    );\n  } else {\n    root.style.setProperty(\n      \"--appBackgroundColor\",\n      rootStyle.getPropertyValue(\"--lightBackground\").trim()\n    );\n    root.style.setProperty(\n      \"--fontColor\",\n      rootStyle.getPropertyValue(\"--lightFont\").trim()\n    );\n    root.style.setProperty(\n      \"--boxBackgroundColor\",\n      rootStyle.getPropertyValue(\"--lightBox\").trim()\n    );\n  }\n\n  const isFirst = localStorage.getItem(\"isFirst\");\n  const isFirstVisit: boolean = isFirst ? JSON.parse(isFirst) : true;\n  if (isFirstVisit)\n    localStorage.setItem(\"isFirst\", JSON.stringify(!isFirstVisit));\n\n  return isFirstVisit;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}