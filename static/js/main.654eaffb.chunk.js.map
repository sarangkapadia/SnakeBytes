{"version":3,"sources":["grid.ts","button.tsx","byte.tsx","byteList.ts","bytes.ts","snake.ts","box.tsx","gridRenderer.tsx","debug/debugBox.tsx","debug/debugGrid.tsx","wordtiles.tsx","gridContainer.tsx","useInterval.tsx","title.tsx","header.tsx","App.tsx","index.tsx"],"names":["Direction","Role","Button","React","memo","props","className","onClick","label","Byte","letter","byteList","Bytes","index","console","log","this","shuffle","array","randomIndex","currentIndex","length","Math","floor","random","nextWord","Snake","snakeEnds","tail","row","col","head","GridItem","role","Canvas","direction","None","pivot","Grid","grid","gridSize","snake","bytes","currentBytes","letterIndex","root","document","querySelector","rootStyle","getComputedStyle","parseInt","getPropertyValue","Array","i","j","getSnakeEnds","FirstTail","FirstHead","Body","Error","setRandomBytePositions","getNextWord","randomRow","randomCol","charAt","toUpperCase","Box","currentHeadDirection","currentTailDirection","currentTailPivot","getClassNameFromDirection","dir","Down","Up","Left","Right","Head","Tail","getClassName","GridRenderer","flat","map","item","id","getStringRole","getStringDirection","DebugBox","DebugGrid","WordTiles","tickCount","tickCountMs","parseFloat","substr","url","URL","window","location","href","urlSearchParams","URLSearchParams","search","gridObj","initGridData","getGridSize","getGrid","GridContainer","useState","getSnake","setSnakeEnds","playing","setPlaying","debug","setDebug","currentLetter","setCurrentLetter","calculateNewTail","ends","currentHeadRow","currentHeadCol","isHeadOnByte","currentTailRow","currentTailCol","pivotDir","currentTailDir","getCurrentTailDirection","newTailRow","newTailCol","getNewEnds","currentHeadDir","getCurrentHeadDirection","newHeadRow","newHeadCol","expected","getExpectedLetter","landed","currentByteSequence","getLetterIndex","incrementLetterIndex","calculateNewHead","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","setInterval","clearInterval","useInterval","newEnds","handleOnPlayPauseGame","useCallback","setCurrentTailDirection","setCurrentHeadDirection","handleOnDebug","handlers","useSwipeable","onSwipedLeft","setPivotOnCurrentHeadDirection","onSwipedRight","onSwipedDown","onSwipedUp","preventDefaultTouchmoveEvent","trackMouse","getPivotDirectionOnCurrentTail","get","Title","fontColor","outerTheme","createTheme","palette","primary","main","trim","Header","ThemeProvider","theme","IconButton","color","size","MenuRounded","HelpRounded","LeaderboardRounded","SettingsRounded","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.654eaffb.chunk.js","sourcesContent":["import { byteList } from \"./byteList\";\nimport { Bytes } from \"./bytes\";\nimport { Snake } from \"./snake\";\n\nexport enum Direction {\n  None,\n  Up,\n  Down,\n  Right,\n  Left,\n}\n\nexport enum Role {\n  Canvas,\n  Body,\n  Head,\n  Tail,\n  Byte,\n  FirstHead,\n  FirstTail,\n}\n\nexport interface IGridItem {\n  role: Role;\n  direction: Direction;\n  pivot: Direction;\n  letter: string;\n}\n\nclass GridItem implements IGridItem {\n  role = Role.Canvas;\n  direction = Direction.None;\n  pivot = Direction.None;\n  letter = \"\";\n}\n\nexport class Grid {\n  private grid: GridItem[][];\n  private gridSize: number;\n  private snake: Snake; // Grid contains a Snake\n\n  private bytes: Bytes; // Grid contains Bytes\n  private currentBytes: string = \"snake\";\n  private letterIndex: number = 0;\n\n  public constructor() {\n    const root = document.querySelector(\":root\")!;\n    const rootStyle = getComputedStyle(root);\n    this.gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\n    this.bytes = new Bytes(byteList);\n\n    this.grid = new Array(this.gridSize);\n    for (let i = 0; i < this.gridSize; i++) {\n      this.grid[i] = new Array(this.gridSize);\n    }\n\n    for (let i = 0; i < this.gridSize; i++) {\n      for (let j = 0; j < this.gridSize; j++) {\n        this.grid[i][j] = new GridItem();\n      }\n    }\n\n    this.snake = new Snake();\n  }\n\n  public getGrid(): GridItem[][] {\n    return this.grid;\n  }\n\n  public getGridSize(): number {\n    return this.gridSize;\n  }\n\n  public getSnake(): Snake {\n    return this.snake;\n  }\n\n  public getCurrentHeadDirection(): Direction {\n    const { head } = this.snake.getSnakeEnds();\n    return this.grid[head.row][head.col].direction;\n  }\n\n  public getCurrentTailDirection(): Direction {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].direction;\n  }\n\n  public setCurrentHeadDirection(direction: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].direction = direction;\n  }\n\n  public getPivotDirectionOnCurrentTail() {\n    const { tail } = this.snake.getSnakeEnds();\n    return this.grid[tail.row][tail.col].pivot;\n  }\n\n  public setCurrentTailDirection(direction: Direction) {\n    const { tail } = this.snake.getSnakeEnds();\n    this.grid[tail.row][tail.col].direction = direction;\n  }\n\n  setPivotOnCurrentHeadDirection(pivot: Direction) {\n    const { head } = this.snake.getSnakeEnds();\n    this.grid[head.row][head.col].pivot = pivot;\n  }\n\n  public initGridData() {\n    const { tail, head } = this.snake.getSnakeEnds();\n\n    this.grid[tail.row][tail.col].direction = Direction.None;\n    this.grid[head.row][head.col].direction = Direction.None;\n\n    this.grid[tail.row][tail.col].role = Role.FirstTail;\n    this.grid[head.row][head.col].role = Role.FirstHead;\n\n    if (tail.row === head.row) {\n      // horizontal snake\n      for (let i = tail.col + 1; i < head.col; i++) {\n        this.grid[tail.row][i].role = Role.Body;\n        this.grid[head.row][i].role = Role.Body;\n      }\n    } else if (tail.col === head.col) {\n      // vertical snake\n      for (let i = tail.row + 1; i < head.row; i++) {\n        this.grid[i][tail.col].role = Role.Body;\n        this.grid[i][tail.col].role = Role.Body;\n      }\n    } else {\n      throw new Error(\"Snake init invalid\");\n    }\n    this.setRandomBytePositions();\n  }\n\n  // sprinkles the next word on the grid\n  public setRandomBytePositions() {\n    this.currentBytes = this.bytes.getNextWord();\n    for (let i = 0; i < this.currentBytes.length; i++) {\n      do {\n        let randomRow = Math.floor(Math.random() * this.gridSize);\n        let randomCol = Math.floor(Math.random() * this.gridSize);\n\n        if (this.grid[randomRow][randomCol].role === Role.Canvas) {\n          this.grid[randomRow][randomCol].role = Role.Byte;\n          this.grid[randomRow][randomCol].letter = this.currentBytes\n            .charAt(i)\n            .toUpperCase();\n          break;\n        } else {\n          console.log(\"Invalid random position\");\n        }\n      } while (1);\n    }\n  }\n\n  public getLetterIndex(): number {\n    return this.letterIndex;\n  }\n\n  public incrementLetterIndex() {\n    // increment index in a circular manner 0-4 and back to 0\n    this.letterIndex = (this.letterIndex + 1) % this.currentBytes.length;\n  }\n\n  public getExpectedLetter(): string {\n    const expected = this.currentBytes.charAt(this.letterIndex);\n    return expected;\n  }\n} // end of grid\n","import React from \"react\";\nimport \"./style/button.css\";\n\ninterface IButtonProps {\n  onClick: () => void;\n  label: string;\n}\n\nexport const Button: React.FunctionComponent<IButtonProps> = React.memo(\n  (props) => {\n    return (\n      <button className={\"newGame\"} onClick={props.onClick}>\n        {props.label}\n      </button>\n    );\n  }\n);\n","import React from \"react\";\nimport \"./style/byte.css\";\n\ninterface IByteProps {\n  letter: string;\n}\nexport const Byte: React.FunctionComponent<IByteProps> = React.memo((props) => {\n  const { letter } = props;\n  return <div className=\"byte\">{letter}</div>;\n});\n","export const byteList: string[] = [\n  \"about\",\n  \"above\",\n  \"actor\",\n  \"acute\",\n  \"admit\",\n  \"adopt\",\n  \"adult\",\n  \"after\",\n  \"again\",\n  \"agent\",\n  \"agree\",\n  \"ahead\",\n  \"alarm\",\n  \"album\",\n  \"alert\",\n  \"alike\",\n  \"alive\",\n  \"allow\",\n  \"apart\",\n  \"apple\",\n  \"apply\",\n  \"arena\",\n  \"argue\",\n  \"arise\",\n  \"array\",\n  \"aside\",\n  \"asset\",\n  \"audio\",\n  \"audit\",\n  \"avoid\",\n  \"award\",\n  \"aware\",\n  \"badly\",\n  \"baker\",\n  \"bases\",\n  \"basic\",\n  \"basis\",\n  \"beach\",\n  \"began\",\n  \"begin\",\n  \"begun\",\n  \"being\",\n  \"below\",\n  \"bench\",\n  \"billy\",\n  \"birth\",\n  \"black\",\n  \"blame\",\n  \"blind\",\n  \"block\",\n  \"booth\",\n  \"bound\",\n  \"brand\",\n  \"bread\",\n  \"break\",\n  \"breed\",\n  \"brief\",\n  \"bring\",\n  \"broad\",\n  \"broke\",\n  \"brown\",\n  \"build\",\n  \"built\",\n  \"buyer\",\n  \"cable\",\n  \"calif\",\n  \"carry\",\n  \"catch\",\n  \"cause\",\n  \"chair\",\n  \"chart\",\n  \"chase\",\n  \"cheap\",\n  \"check\",\n  \"chest\",\n  \"child\",\n  \"civil\",\n  \"claim\",\n  \"class\",\n  \"clear\",\n  \"click\",\n  \"clock\",\n  \"close\",\n  \"coach\",\n  \"coast\",\n  \"could\",\n  \"count\",\n  \"court\",\n  \"cover\",\n  \"craft\",\n  \"crash\",\n  \"cream\",\n  \"crime\",\n  \"cross\",\n  \"crowd\",\n  \"crown\",\n  \"curve\",\n  \"cycle\",\n  \"daily\",\n  \"dance\",\n  \"dated\",\n  \"dealt\",\n  \"death\",\n  \"debut\",\n  \"delay\",\n  \"depth\",\n  \"doing\",\n  \"doubt\",\n  \"draft\",\n  \"drawn\",\n  \"dream\",\n  \"dress\",\n  \"drill\",\n  \"drink\",\n  \"drive\",\n  \"drove\",\n  \"dying\",\n  \"eager\",\n  \"early\",\n  \"earth\",\n  \"eight\",\n  \"elite\",\n  \"empty\",\n  \"enemy\",\n  \"enjoy\",\n  \"enter\",\n  \"entry\",\n  \"equal\",\n  \"error\",\n  \"event\",\n  \"every\",\n  \"exact\",\n  \"exist\",\n  \"extra\",\n  \"faith\",\n  \"fault\",\n  \"fifth\",\n  \"fifty\",\n  \"fight\",\n  \"final\",\n  \"first\",\n  \"fixed\",\n  \"flash\",\n  \"fleet\",\n  \"floor\",\n  \"fluid\",\n  \"focus\",\n  \"force\",\n  \"forth\",\n  \"forty\",\n  \"forum\",\n  \"found\",\n  \"frame\",\n  \"frank\",\n  \"fraud\",\n  \"fresh\",\n  \"front\",\n  \"fruit\",\n  \"fully\",\n  \"funny\",\n  \"giant\",\n  \"given\",\n  \"glass\",\n  \"globe\",\n  \"going\",\n  \"grace\",\n  \"grade\",\n  \"grand\",\n  \"grant\",\n  \"grass\",\n  \"great\",\n  \"green\",\n  \"gross\",\n  \"group\",\n  \"grown\",\n  \"guard\",\n  \"guess\",\n  \"guest\",\n  \"guide\",\n  \"happy\",\n  \"harry\",\n  \"heart\",\n  \"heavy\",\n  \"hence\",\n  \"henry\",\n  \"horse\",\n  \"house\",\n  \"human\",\n  \"image\",\n  \"index\",\n  \"inner\",\n  \"input\",\n  \"issue\",\n  \"japan\",\n  \"jimmy\",\n  \"joint\",\n  \"jones\",\n  \"judge\",\n  \"known\",\n  \"label\",\n  \"large\",\n  \"laser\",\n  \"later\",\n  \"laugh\",\n  \"layer\",\n  \"learn\",\n  \"lease\",\n  \"least\",\n  \"leave\",\n  \"legal\",\n  \"level\",\n  \"lewis\",\n  \"light\",\n  \"limit\",\n  \"local\",\n  \"logic\",\n  \"loose\",\n  \"lucky\",\n  \"lunch\",\n  \"lying\",\n  \"magic\",\n  \"major\",\n  \"maker\",\n  \"march\",\n  \"maria\",\n  \"match\",\n  \"maybe\",\n  \"mayor\",\n  \"meant\",\n  \"media\",\n  \"metal\",\n  \"might\",\n  \"minor\",\n  \"minus\",\n  \"mixed\",\n  \"model\",\n  \"money\",\n  \"month\",\n  \"moral\",\n  \"motor\",\n  \"mount\",\n  \"mouth\",\n  \"movie\",\n  \"music\",\n  \"newly\",\n  \"night\",\n  \"noise\",\n  \"north\",\n  \"noted\",\n  \"novel\",\n  \"nurse\",\n  \"occur\",\n  \"ocean\",\n  \"offer\",\n  \"often\",\n  \"order\",\n  \"other\",\n  \"ought\",\n  \"paint\",\n  \"panel\",\n  \"paper\",\n  \"party\",\n  \"peace\",\n  \"peter\",\n  \"phase\",\n  \"phone\",\n  \"photo\",\n  \"piece\",\n  \"pilot\",\n  \"pitch\",\n  \"place\",\n  \"plain\",\n  \"plant\",\n  \"pound\",\n  \"power\",\n  \"press\",\n  \"price\",\n  \"pride\",\n  \"prime\",\n  \"print\",\n  \"prior\",\n  \"prize\",\n  \"proof\",\n  \"proud\",\n  \"prove\",\n  \"queen\",\n  \"quick\",\n  \"rapid\",\n  \"ratio\",\n  \"reach\",\n  \"ready\",\n  \"refer\",\n  \"right\",\n  \"rival\",\n  \"river\",\n  \"robin\",\n  \"roman\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"royal\",\n  \"rural\",\n  \"shape\",\n  \"shell\",\n  \"shift\",\n  \"shirt\",\n  \"shown\",\n  \"sight\",\n  \"since\",\n  \"sixth\",\n  \"sized\",\n  \"smith\",\n  \"smoke\",\n  \"solid\",\n  \"solve\",\n  \"sorry\",\n  \"sound\",\n  \"south\",\n  \"space\",\n  \"spare\",\n  \"speak\",\n  \"speed\",\n  \"spend\",\n  \"spent\",\n  \"split\",\n  \"spoke\",\n  \"sport\",\n  \"staff\",\n  \"stage\",\n  \"stake\",\n  \"stand\",\n  \"start\",\n  \"state\",\n  \"steam\",\n  \"steel\",\n  \"stick\",\n  \"still\",\n  \"stock\",\n  \"stone\",\n  \"stood\",\n  \"stuff\",\n  \"style\",\n  \"sugar\",\n  \"suite\",\n  \"super\",\n  \"sweet\",\n  \"table\",\n  \"taken\",\n  \"taste\",\n  \"taxes\",\n  \"teach\",\n  \"teeth\",\n  \"terry\",\n  \"texas\",\n  \"thank\",\n  \"theft\",\n  \"their\",\n  \"theme\",\n  \"there\",\n  \"these\",\n  \"thick\",\n  \"thing\",\n  \"think\",\n  \"third\",\n  \"those\",\n  \"three\",\n  \"threw\",\n  \"throw\",\n  \"tight\",\n  \"times\",\n  \"tired\",\n  \"title\",\n  \"total\",\n  \"track\",\n  \"trade\",\n  \"train\",\n  \"treat\",\n  \"trend\",\n  \"trial\",\n  \"tried\",\n  \"tries\",\n  \"truck\",\n  \"truly\",\n  \"trust\",\n  \"truth\",\n  \"twice\",\n  \"under\",\n  \"undue\",\n  \"union\",\n  \"unity\",\n  \"until\",\n  \"upper\",\n  \"upset\",\n  \"urban\",\n  \"usage\",\n  \"usual\",\n  \"valid\",\n  \"value\",\n  \"video\",\n  \"virus\",\n  \"visit\",\n  \"vital\",\n  \"voice\",\n  \"watch\",\n  \"water\",\n  \"wheel\",\n  \"which\",\n  \"while\",\n  \"white\",\n  \"whole\",\n  \"whose\",\n  \"woman\",\n  \"women\",\n  \"world\",\n  \"worry\",\n  \"worse\",\n  \"worst\",\n  \"worth\",\n  \"would\",\n  \"wound\",\n  \"write\",\n  \"wrong\",\n  \"wrote\",\n  \"yield\",\n  \"young\",\n  \"youth\",\n];\n","export class Bytes {\n  private byteList: string[] = [];\n  private index: number = 0;\n\n  public shuffle(array: string[]) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n  public constructor(byteList: string[], index?: number) {\n    console.log(\"this should be called only once\");\n    this.byteList = this.shuffle(byteList);\n    this.index = index ? index : 0;\n  }\n\n  public getNextWord(): string {\n    const nextWord = this.byteList[this.index];\n    this.index = (this.index + 1) % this.byteList.length;\n    return nextWord;\n  }\n}\n","// Snake metadata\n\nexport interface ISnakeEnds {\n  tail: { row: number; col: number };\n  head: { row: number; col: number };\n}\n\nexport class Snake {\n  private snakeEnds: ISnakeEnds;\n\n  public constructor(snakeEnds?: ISnakeEnds) {\n    if (snakeEnds) {\n      this.snakeEnds = snakeEnds;\n      return;\n    }\n\n    this.snakeEnds = {\n      tail: { row: 5, col: 5 },\n      head: { row: 5, col: 10 },\n    };\n  }\n\n  public getSnakeEnds(): ISnakeEnds {\n    return this.snakeEnds;\n  }\n\n  public setSnakeEnds(snakeEnds: ISnakeEnds): void {\n    this.snakeEnds = snakeEnds;\n  }\n\n  public snakeAlive(): boolean {\n    // TBD check if the snake head is not collided with a body/tail\n    return true;\n  }\n\n  public snakeLength(): number {\n    // TBD - return the number of grid locations\n    return 4;\n  }\n}\n","import React from \"react\";\nimport { Byte } from \"./byte\";\nimport { Direction, Role } from \"./grid\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  role: Role;\n  letter: string;\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  const {\n    role,\n    letter,\n    currentHeadDirection,\n    currentTailDirection,\n    currentTailPivot,\n  } = props;\n\n  const getClassNameFromDirection = (dir: Direction) => {\n    switch (dir) {\n      case Direction.Down:\n        return \"t2b\";\n      case Direction.Up:\n        return \"b2t\";\n      case Direction.Left:\n        return \"r2l\";\n      case Direction.Right:\n        return \"l2r\";\n      case Direction.None:\n        return \"none\";\n      default:\n        throw new Error(\"invalid dir\");\n    }\n  };\n\n  const getClassName = (): string => {\n    switch (role) {\n      case Role.FirstTail:\n      case Role.Canvas:\n        return \"box\";\n      case Role.Head:\n        return `head_${getClassNameFromDirection(currentHeadDirection)}`;\n      case Role.FirstHead:\n        return \"head_none\";\n      case Role.Body:\n        return \"snake\";\n      case Role.Tail:\n        return `tail_${getClassNameFromDirection(\n          currentTailPivot !== Direction.None\n            ? currentTailPivot\n            : currentTailDirection\n        )}`;\n      case Role.Byte:\n        return \"food\";\n      default:\n        throw new Error(\"invalid role\");\n    }\n  };\n\n  let className = getClassName();\n\n  return className === \"food\" ? (\n    <div className={className}>\n      <Byte letter={letter} />\n    </div>\n  ) : (\n    <div className={className}></div>\n  );\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction, IGridItem } from \"./grid\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: IGridItem[][];\n  currentHeadDirection: Direction;\n  currentTailDirection: Direction;\n  currentTailPivot: Direction;\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentHeadDirection, currentTailDirection, currentTailPivot } =\n    props;\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((item, index) => (\n        <Box\n          role={item.role}\n          letter={item.letter}\n          id={index}\n          key={index}\n          currentHeadDirection={currentHeadDirection}\n          currentTailDirection={currentTailDirection}\n          currentTailPivot={currentTailPivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import { IGridItem, Role, Direction } from \"../grid\";\nimport \"../style/debug/debugBox.css\";\n\nconst getStringRole = (role: Role): string => {\n  switch (role) {\n    case Role.Body:\n      return \"b \";\n    case Role.Head:\n      return \"h \";\n    case Role.Tail:\n      return \"t \";\n    case Role.Canvas:\n      return \"c \";\n    case Role.Byte:\n      return \"f \";\n    default:\n      throw new Error(\"invalid role\");\n  }\n};\n\nconst getStringDirection = (direction: Direction): string => {\n  switch (direction) {\n    case Direction.Down:\n      return \"d \";\n    case Direction.Up:\n      return \"u \";\n    case Direction.Left:\n      return \"l \";\n    case Direction.Right:\n      return \"r \";\n    case Direction.None:\n      return \"n \";\n    default:\n      throw new Error(\"invalid direction\");\n  }\n};\n\nexport const DebugBox: React.FunctionComponent<IGridItem> = (props) => {\n  const { role, direction, pivot } = props;\n  return (\n    <div className={\"debugBox\"}>\n      {role > 0 ? getStringRole(role) : null}\n      {direction > 0 ? getStringDirection(direction) : null}\n      {role > 0 ? getStringDirection(pivot).toUpperCase() : null}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { DebugBox } from \"./debugBox\";\nimport { IGridItem } from \"../grid\";\n\nimport \"../style/debug/debugGrid.css\";\n\ninterface IDebugGridProps {\n  grid: IGridItem[][];\n}\n\nexport const DebugGrid: React.FunctionComponent<IDebugGridProps> = (props) => {\n  const { grid } = props;\n  return (\n    <div className={\"debugGrid\"}>\n      {grid.flat().map((item, index) => (\n        <DebugBox\n          key={index}\n          role={item.role}\n          letter={item.letter}\n          direction={item.direction}\n          pivot={item.pivot}\n        />\n      ))}\n    </div>\n  );\n};\n","import \"./style/wordTiles.css\";\nimport \"./style/tile.css\";\nimport React from \"react\";\ninterface IWordTileProps {\n  bytes: string;\n}\nexport const WordTiles: React.FunctionComponent<IWordTileProps> = React.memo(\n  (props: IWordTileProps) => {\n    return (\n      <div className={\"wordTilesContainer\"}>\n        {[...props.bytes].map((letter, index) => (\n          <div key={index} className={\"tile\"}>\n            {letter}\n          </div>\n        ))}\n      </div>\n    );\n  }\n);\n","import React, { useCallback, useState } from \"react\";\nimport { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { Grid, Direction, Role } from \"./grid\";\nimport { DebugGrid } from \"./debug/debugGrid\";\nimport \"./style/gridContainer.css\";\nimport { WordTiles } from \"./wordtiles\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst tickCount = rootStyle.getPropertyValue(\"--tick\");\nconst tickCountMs =\n  parseFloat(tickCount.substr(0, tickCount.length - 1)) * 1000;\n\nconst url: URL = new URL(window.location.href);\nconst urlSearchParams = new URLSearchParams(url.search);\n\nconst gridObj = new Grid();\ngridObj.initGridData();\n\nconst gridSize = gridObj.getGridSize();\nconst grid = gridObj.getGrid();\n\nexport const GridContainer: React.FunctionComponent = () => {\n  const [snakeEnds, setSnakeEnds] = useState(gridObj.getSnake().getSnakeEnds());\n  const [playing, setPlaying] = useState(false);\n  const [debug, setDebug] = useState(false);\n  const [currentLetter, setCurrentLetter] = useState(\"\");\n\n  // add logic in these to detect game end\n  const onSwipedLeft = () => {\n    if (!playing) return;\n\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Left);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Left);\n  };\n\n  const onSwipedRight = () => {\n    if (!playing) return;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Left || currentHeadDir === Direction.Right)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Right);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Right);\n  };\n\n  const onSwipedUp = () => {\n    if (!playing) return;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Up);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Up);\n  };\n\n  const onSwipedDown = () => {\n    if (!playing) return;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n    if (currentHeadDir === Direction.Down || currentHeadDir === Direction.Up)\n      return;\n    gridObj.setCurrentHeadDirection(Direction.Down);\n    gridObj.setPivotOnCurrentHeadDirection(Direction.Down);\n  };\n\n  const calculateNewHead = (ends: typeof snakeEnds) => {\n    /* ========================= HEAD ==============================*/\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    const currentHeadDir = gridObj.getCurrentHeadDirection();\n\n    grid[currentHeadRow][currentHeadCol].role = Role.Body; // make current head -> snake body\n    grid[currentHeadRow][currentHeadCol].direction = Direction.None; // make current head's dir none\n\n    // now calculate the new position (row, col) for head based on the current head direction.\n    let newHeadRow = currentHeadRow;\n    let newHeadCol = currentHeadCol;\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newHeadRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newHeadRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newHeadCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newHeadCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        throw new Error(\"Invalid head direction!\");\n      }\n    }\n    ends.head.row = newHeadRow;\n    ends.head.col = newHeadCol;\n\n    // check if new Head is a valid role\n    switch (grid[newHeadRow][newHeadCol].role) {\n      case Role.Tail:\n      case Role.Canvas: {\n        grid[newHeadRow][newHeadCol].role = Role.Head; // canvas -> head'\n        break;\n      }\n      case Role.Byte: {\n        const expected = gridObj.getExpectedLetter().toUpperCase();\n        const landed = grid[newHeadRow][newHeadCol].letter;\n\n        if (landed !== expected)\n          throw new Error(\n            `Wrong letter, expected = ${expected}, letter = ${landed}`\n          );\n\n        const currentByteSequence =\n          gridObj.getLetterIndex() > 0 ? currentLetter + landed : landed;\n        setCurrentLetter(currentByteSequence);\n\n        gridObj.incrementLetterIndex();\n        if (gridObj.getLetterIndex() === 0) {\n          gridObj.setRandomBytePositions();\n        }\n\n        break;\n      }\n      default:\n        setPlaying(false);\n        throw new Error(\"Head collision with invalid role\");\n    }\n\n    grid[newHeadRow][newHeadCol].direction = currentHeadDir; // retain previous head's dir in the new head\n  };\n\n  const isHeadOnByte = (ends: typeof snakeEnds): boolean => {\n    const currentHeadRow = snakeEnds.head.row;\n    const currentHeadCol = snakeEnds.head.col;\n    return grid[currentHeadRow][currentHeadCol].role === Role.Byte;\n  };\n\n  const calculateNewTail = (ends: typeof snakeEnds) => {\n    // no-op if the head is on a byte\n    if (isHeadOnByte(snakeEnds)) {\n      return;\n    }\n\n    /* ========================= TAIL ==============================*/\n    const currentTailRow = snakeEnds.tail.row;\n    const currentTailCol = snakeEnds.tail.col;\n    const pivotDir = grid[currentTailRow][currentTailCol].pivot;\n    // override current tail direction if there is a pivot direction left behind by the head at some point.\n    const currentTailDir =\n      pivotDir !== Direction.None\n        ? pivotDir\n        : gridObj.getCurrentTailDirection();\n\n    grid[currentTailRow][currentTailCol].role = Role.Canvas; // tail -> canvas\n    grid[currentTailRow][currentTailCol].direction = Direction.None; // tail -> canvas dir\n\n    if (pivotDir !== Direction.None)\n      grid[currentTailRow][currentTailCol].pivot = Direction.None; // clear pivots as the tail arrives\n\n    let newTailRow = currentTailRow;\n    let newTailCol = currentTailCol;\n\n    // now calculate the new position (row, col) for tail based on the current tail direction.\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newTailRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newTailRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newTailCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newTailCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default: {\n        setPlaying(false);\n        throw new Error(\"Invalid tail direction!\");\n      }\n    }\n\n    ends.tail.row = newTailRow;\n    ends.tail.col = newTailCol;\n    grid[newTailRow][newTailCol].role = Role.Tail; // body -> tail\n    grid[newTailRow][newTailCol].direction = currentTailDir;\n  };\n\n  // calcualte the new snake ends, and assign new roles as necessary\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    calculateNewTail(ends);\n    calculateNewHead(ends);\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    // set new roles on the new ends\n    const newEnds = getNewEnds(ends);\n    setSnakeEnds(newEnds);\n    // set new ends\n    gridObj.getSnake().setSnakeEnds(ends);\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? tickCountMs : null\n  );\n\n  const handleOnPlayPauseGame = useCallback(() => {\n    if (!playing) {\n      const currentTailDir = gridObj.getCurrentTailDirection();\n      const currentHeadDir = gridObj.getCurrentHeadDirection();\n      // on hitting play\n      if (\n        currentHeadDir === Direction.None &&\n        currentTailDir === Direction.None\n      ) {\n        gridObj.setCurrentTailDirection(Direction.Right);\n        gridObj.setCurrentHeadDirection(Direction.Right);\n      }\n    }\n\n    setPlaying((playing) => !playing);\n  }, [playing]);\n\n  const handleOnDebug = useCallback(() => {\n    setDebug((debug) => !debug);\n  }, []);\n\n  const isDebugMode = () => {\n    return urlSearchParams.get(\"debug\") === \"true\";\n  };\n\n  const handlers = useSwipeable({\n    onSwipedLeft: onSwipedLeft,\n    onSwipedRight: onSwipedRight,\n    onSwipedDown: onSwipedDown,\n    onSwipedUp: onSwipedUp,\n    //onTap: handleOnPlayPauseGame,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  return (\n    <div {...handlers} className={\"game\"}>\n      <div className={\"gridContainer\"}>\n        {debug ? (\n          <DebugGrid grid={grid} />\n        ) : (\n          <GridRenderer\n            grid={grid}\n            currentHeadDirection={gridObj.getCurrentHeadDirection()}\n            currentTailDirection={gridObj.getCurrentTailDirection()}\n            currentTailPivot={gridObj.getPivotDirectionOnCurrentTail()}\n          />\n        )}\n      </div>\n      <div className={\"appUtils\"}>\n        {\n          <Button\n            onClick={handleOnPlayPauseGame}\n            label={playing ? \"Pause\" : \"Play\"}\n          />\n        }\n        {isDebugMode() ? (\n          <Button\n            onClick={handleOnDebug}\n            label={debug ? \"Debug Off\" : \"Debug On\"}\n          />\n        ) : null}\n      </div>\n      <WordTiles bytes={currentLetter} />\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/title.css\";\n\nexport const Title: React.FunctionComponent = React.memo(() => {\n  return <div className=\"title\">Snake Bytes</div>;\n});\n","import React from \"react\";\nimport { Title } from \"./title\";\nimport \"./style/header.css\";\nimport { IconButton } from \"@mui/material\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport {\n  SettingsRounded,\n  MenuRounded,\n  HelpRounded,\n  LeaderboardRounded,\n} from \"@mui/icons-material\";\n\n// move this to a useEffect\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\n\nconst fontColor = rootStyle.getPropertyValue(\"--fontColor\");\n\nconst outerTheme = createTheme({\n  palette: {\n    primary: {\n      main: fontColor.trim(), // hex versions of --var(fontColor)\n    },\n  },\n});\n\nexport const Header: React.FunctionComponent = () => {\n  return (\n    <ThemeProvider theme={outerTheme}>\n      <div className={\"header\"}>\n        <div className={\"menuleft\"}>\n          <IconButton aria-label=\"Menu\" color=\"primary\" size=\"small\">\n            <MenuRounded />\n          </IconButton>\n          <IconButton aria-label=\"Instruction\" color=\"primary\" size=\"small\">\n            <HelpRounded />\n          </IconButton>\n        </div>\n        <Title />\n        <div className={\"menuright\"}>\n          <IconButton aria-label=\"Stats\" color=\"primary\" size=\"small\">\n            <LeaderboardRounded />\n          </IconButton>\n          <IconButton aria-label=\"Settings\" color=\"primary\" size=\"small\">\n            <SettingsRounded />\n          </IconButton>\n        </div>\n      </div>\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport \"./style/App.css\";\n\nimport { GridContainer } from \"./gridContainer\";\nimport { Header } from \"./header\";\n\nexport const App: React.FunctionComponent = () => {\n  return (\n    <div className={\"appContainer\"}>\n      <Header />\n      <GridContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}