{"version":3,"sources":["gridContainer.tsx","title.tsx","score.tsx","button.tsx","box.tsx","gridRenderer.tsx","useInterval.tsx","App.tsx","index.tsx"],"names":["Direction","Title","console","log","Score","React","memo","props","currentScore","Button","className","onClick","label","Box","GridRenderer","grid","currentDirection","getClassName","box","flat","map","index","id","root","document","querySelector","rootStyle","getComputedStyle","gridSize","parseInt","getPropertyValue","snakeEndsInit","tail","row","col","head","Array","from","fill","currentHeadDir","Down","currentTailDir","logSwipe","GridContainer","useState","snakeEnds","setSnakeEnds","playing","setPlaying","handlers","useSwipeable","onSwipedLeft","onSwipedRight","onSwipedDown","onSwipedUp","preventDefaultTouchmoveEvent","trackMouse","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","setInterval","clearInterval","useInterval","ends","newCol","newRow","Up","Right","Left","Error","getNewEnds","handleOnNewGame","useCallback","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8039e80a.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { Score } from \"./score\";\nimport { Button } from \"./button\";\nimport { useInterval } from \"./useInterval\";\nimport { GridRenderer } from \"./gridRenderer\";\nimport { useSwipeable } from \"react-swipeable\";\n\nconst root = document.querySelector(\":root\")!;\nconst rootStyle = getComputedStyle(root);\nlet gridSize = parseInt(rootStyle.getPropertyValue(\"--gridSize\"));\nconst snakeEndsInit = { tail: { row: 5, col: 5 }, head: { row: 8, col: 5 } };\n\n// init the grid\nlet grid: string[][] = Array.from(Array(gridSize), () =>\n  new Array(gridSize).fill(\"b\")\n);\ngrid[5][5] = \"t\";\ngrid[6][5] = grid[7][5] = \"s\";\ngrid[8][5] = \"h\";\n\n// decare the directions\nexport enum Direction {\n  Up = 1,\n  Down,\n  Right,\n  Left,\n}\n\nlet currentHeadDir = Direction.Down;\nlet currentTailDir = Direction.Down;\n\nconst logSwipe = () => {\n  console.log(\"swipe detected\");\n};\n\nexport const GridContainer: React.FunctionComponent = () => {\n  const [snakeEnds, setSnakeEnds] = useState(snakeEndsInit);\n  const [playing, setPlaying] = useState(false);\n\n  const handlers = useSwipeable({\n    onSwipedLeft: () => {\n      console.log(\"swipe left\");\n    },\n    onSwipedRight: logSwipe,\n    onSwipedDown: logSwipe,\n    onSwipedUp: logSwipe,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true,\n  });\n\n  console.log(handlers);\n  //   const [currentHeadDir, setCurrentHeadDir] = useState(Direction.Down);\n  //   const [currentTailDir, setCurrentTailDir] = useState(Direction.Down);\n\n  const getNewEnds = (ends: typeof snakeEnds) => {\n    let newCol = snakeEnds.head.col;\n    let newRow = snakeEnds.head.row;\n    grid[newRow][newCol] = \"s\"; // make current head -> snake\n\n    switch (currentHeadDir) {\n      case Direction.Up: {\n        newRow =\n          snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newRow =\n          snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newCol =\n          snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newCol =\n          snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n        break;\n      }\n      default:\n        throw new Error(\"Invalid head direction!\");\n    }\n    ends.head.row = newRow;\n    ends.head.col = newCol;\n\n    grid[newRow][newCol] = \"h\"; // b -> h\n    grid[snakeEnds.tail.row][snakeEnds.tail.col] = \"b\"; // t -> b\n\n    newCol = snakeEnds.tail.col;\n    newRow = snakeEnds.tail.row;\n\n    switch (currentTailDir) {\n      case Direction.Up: {\n        newRow =\n          snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n        break;\n      }\n      case Direction.Down: {\n        newRow =\n          snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n        break;\n      }\n      case Direction.Right: {\n        newCol =\n          snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n        break;\n      }\n      case Direction.Left: {\n        newCol =\n          snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n        break;\n      }\n      default:\n        throw new Error(\"Invalid tail direction!\");\n    }\n\n    ends.tail.row = newRow;\n    ends.tail.col = newCol;\n    grid[newRow][newCol] = \"t\"; // s -> t\n\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds };\n    // console.log(\"head = \", ends.head, \"tail = \", ends.tail);\n    setSnakeEnds(getNewEnds(ends));\n  };\n\n  useInterval(\n    onTick,\n    // Delay in milliseconds or null to stop it\n    playing ? 600 : null\n  );\n\n  const handleOnNewGame = useCallback(() => {\n    setPlaying((playing) => !playing);\n  }, []);\n\n  return (\n    <div {...handlers}>\n      <GridRenderer\n        grid={grid}\n        currentDirection={{ head: currentHeadDir, tail: currentTailDir }}\n      />\n      <div className={\"appUtils\"}>\n        <Score currentScore={0}></Score>\n        <Button\n          onClick={handleOnNewGame}\n          label={playing ? \"Stop Game\" : \"New Game\"}\n        />\n        {/* <div {...handlers}>\n          <Score currentScore={10}></Score>\n          {\"This is the swipe Area\"}\n        </div> */}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const Title:React.FunctionComponent = () => {\n    console.log(\"Title rendering\");\n    return <h2>SNAKE</h2>;\n}","import React from 'react';\n\ninterface IScoreProps{\n    currentScore:number;\n}\nexport const Score: React.FunctionComponent<IScoreProps> = React.memo((props) => {\n    console.log(\"Score rendering: \" ,props.currentScore);\n    return <h2>Score: {props.currentScore}</h2>\n});","import React from \"react\";\nimport \"./style/button.css\";\n\ninterface IButtonProps {\n  onClick: () => void;\n  label: string;\n}\n\nexport const Button: React.FunctionComponent<IButtonProps> = React.memo(\n  (props) => {\n    console.log(\"Button rendering\");\n    return (\n      <button className={\"newGame\"} onClick={props.onClick}>\n        {props.label}\n      </button>\n    );\n  }\n);\n","import React from \"react\";\nimport { Direction } from \"./gridContainer\";\nimport \"./style/box.css\";\n\ninterface IBoxProps {\n  id: number;\n  className: string;\n  currentDirection: { head: Direction; tail: Direction };\n}\n\nexport const Box: React.FunctionComponent<IBoxProps> = React.memo((props) => {\n  return <div className={props.className}></div>;\n});\n","import React from \"react\";\nimport { Box } from \"./box\";\nimport { Direction } from \"./gridContainer\";\nimport \"./style/grid.css\";\n\ninterface IGridRendererProps {\n  grid: string[][];\n  currentDirection: { head: Direction; tail: Direction };\n}\n\nexport const GridRenderer: React.FunctionComponent<IGridRendererProps> = (\n  props\n) => {\n  const { grid, currentDirection } = props;\n\n  const getClassName = (box: string): string => {\n    switch (box) {\n      case \"b\":\n        return \"box\";\n      case \"h\":\n        return \"head\";\n      case \"s\":\n        return \"snake\";\n      case \"t\":\n        return \"tail\";\n      case \"f\":\n        return \"food\";\n    }\n    return \"invalid\";\n  };\n\n  return (\n    <div className={\"grid\"}>\n      {grid.flat().map((box, index) => (\n        <Box\n          className={getClassName(box)}\n          id={index}\n          key={index}\n          currentDirection={currentDirection}\n        />\n      ))}\n    </div>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef } from \"react\"\n\nexport const useInterval = (callback: () => void, delay: number | null) => {\n    const savedCallback = useRef(callback)\n  \n    // Remember the latest callback if it changes.\n    useLayoutEffect(() => {\n      savedCallback.current = callback\n    }, [callback])\n  \n    // Set up the interval.\n    useEffect(() => {\n      // Don't schedule if no delay is specified.\n      if (!delay) {\n        return\n      }\n  \n      const id = setInterval(() => savedCallback.current(), delay)\n  \n      return () => clearInterval(id)\n    }, [delay])\n  }","import React from \"react\";\nimport \"./style/App.css\";\n\nimport { Title } from \"./title\";\nimport { GridContainer } from \"./gridContainer\";\n\nexport const App: React.FunctionComponent = () => {\n  return (\n    <div className={\"appContainer\"}>\n      <Title />\n      <GridContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}