{"ast":null,"code":"var _jsxFileName = \"/Users/sarangkapadia/Documents/HelloWeb/snake/src/grid.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport { Box } from './box';\nimport { Score } from './score';\nimport { Button } from './button';\nimport { useInterval } from './useInterval';\nimport './style/grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = document.querySelector(':root');\nconst rootStyle = getComputedStyle(root);\nlet gridSize = parseInt(rootStyle.getPropertyValue('--gridSize'));\nconst snakeEndsInit = {\n  tail: {\n    row: 5,\n    col: 5\n  },\n  head: {\n    row: 8,\n    col: 5\n  }\n};\nlet grid = Array.from(Array(gridSize), () => new Array(gridSize).fill('b'));\ngrid[5][5] = grid[6][5] = grid[7][5] = grid[8][5] = 's';\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Up\"] = 1] = \"Up\";\n  Direction[Direction[\"Down\"] = 2] = \"Down\";\n  Direction[Direction[\"Right\"] = 3] = \"Right\";\n  Direction[Direction[\"Left\"] = 4] = \"Left\";\n})(Direction || (Direction = {}));\n\nlet currentHeadDir = Direction.Down;\nlet currentTailDir = Direction.Down;\nexport const Grid = () => {\n  _s();\n\n  const [snakeEnds, setSnakeEnds] = useState(snakeEndsInit);\n  const [playing, setPlaying] = useState(false);\n\n  const getNewEnds = ends => {\n    let newCol = snakeEnds.head.col;\n    let newRow = snakeEnds.head.row;\n\n    switch (currentHeadDir) {\n      case Direction.Up:\n        {\n          newRow = snakeEnds.head.row - 1 < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n          break;\n        }\n\n      case Direction.Down:\n        {\n          newRow = snakeEnds.head.row + 1 >= gridSize ? 0 : snakeEnds.head.row + 1;\n          break;\n        }\n\n      case Direction.Right:\n        {\n          newCol = snakeEnds.head.col + 1 >= gridSize ? 0 : snakeEnds.head.col + 1;\n          break;\n        }\n\n      case Direction.Left:\n        {\n          newCol = snakeEnds.head.col - 1 < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n          break;\n        }\n\n      default:\n        throw new Error('Invalid head direction!');\n    }\n\n    ends.head.row = newRow;\n    ends.head.col = newCol;\n    grid[newRow][newCol] = 's'; // assign new head\n\n    grid[snakeEnds.tail.row][snakeEnds.tail.col] = 'b'; //clear current tail\n\n    newCol = snakeEnds.tail.col;\n    newRow = snakeEnds.tail.row;\n\n    switch (currentTailDir) {\n      case Direction.Up:\n        {\n          newRow = snakeEnds.tail.row - 1 < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n          break;\n        }\n\n      case Direction.Down:\n        {\n          newRow = snakeEnds.tail.row + 1 >= gridSize ? 0 : snakeEnds.tail.row + 1;\n          break;\n        }\n\n      case Direction.Right:\n        {\n          newCol = snakeEnds.tail.col + 1 >= gridSize ? 0 : snakeEnds.tail.col + 1;\n          break;\n        }\n\n      case Direction.Left:\n        {\n          newCol = snakeEnds.tail.col - 1 < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n          break;\n        }\n\n      default:\n        throw new Error('Invalid tail direction!');\n    }\n\n    ends.tail.row = newRow;\n    ends.tail.col = newCol;\n    return ends;\n  };\n\n  const onTick = () => {\n    let ends = { ...snakeEnds\n    };\n    console.log('head = ', ends.head, 'tail = ', ends.tail);\n    setSnakeEnds(getNewEnds(ends));\n  };\n\n  useInterval(onTick, // Delay in milliseconds or null to stop it\n  playing ? 2000 : null);\n  const handleOnNewGame = useCallback(() => {\n    setPlaying(playing => !playing);\n  }, []);\n  console.log(\"grid rendering\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'gridContainer',\n      children: grid.flat().map((box, index) => /*#__PURE__*/_jsxDEV(Box, {\n        className: box === 'b' ? 'box' : 'snake',\n        id: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 50\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'appUtils',\n      children: [/*#__PURE__*/_jsxDEV(Score, {\n        currentScore: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleOnNewGame,\n        label: playing ? 'Stop Game' : 'New Game'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"wzbnbSFX7WFqNVVFEr4zRuIogwI=\", false, function () {\n  return [useInterval];\n});\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/sarangkapadia/Documents/HelloWeb/snake/src/grid.tsx"],"names":["React","useCallback","useState","Box","Score","Button","useInterval","root","document","querySelector","rootStyle","getComputedStyle","gridSize","parseInt","getPropertyValue","snakeEndsInit","tail","row","col","head","grid","Array","from","fill","Direction","currentHeadDir","Down","currentTailDir","Grid","snakeEnds","setSnakeEnds","playing","setPlaying","getNewEnds","ends","newCol","newRow","Up","Right","Left","Error","onTick","console","log","handleOnNewGame","flat","map","box","index"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport  { Box } from './box';\nimport { Score } from './score';\nimport { Button } from './button';\nimport { useInterval } from './useInterval';\nimport './style/grid.css'\n\nconst root = document.querySelector(':root')!;\nconst rootStyle = getComputedStyle(root);\nlet gridSize = parseInt(rootStyle.getPropertyValue('--gridSize'));\nconst snakeEndsInit = {tail:{row:5, col:5}, head:{row:8, col:5}};\n\nlet grid:string[][] = Array.from(Array(gridSize), () => new Array(gridSize).fill('b'));\ngrid[5][5] = grid[6][5] = grid[7][5] = grid[8][5] = 's';\nenum Direction{\n    Up = 1,\n    Down,\n    Right,\n    Left,\n}\n\nlet currentHeadDir = Direction.Down; \nlet currentTailDir = Direction.Down; \n\nexport const Grid: React.FunctionComponent = () => {\n    const [snakeEnds, setSnakeEnds] = useState(snakeEndsInit);\n    const [playing, setPlaying] = useState(false);\n\n    const getNewEnds = (ends: typeof snakeEnds) => {\n        let newCol = snakeEnds.head.col;\n        let newRow = snakeEnds.head.row;\n\n        switch(currentHeadDir){\n            case Direction.Up: {\n                newRow = (snakeEnds.head.row - 1) < 0 ? gridSize - 1 : snakeEnds.head.row - 1;\n                break;\n            }\n            case Direction.Down:{\n                newRow = (snakeEnds.head.row + 1) >= gridSize ? 0 : snakeEnds.head.row + 1;\n                break;\n            }\n            case Direction.Right:{\n                newCol = (snakeEnds.head.col + 1) >= gridSize ? 0 : snakeEnds.head.col + 1;\n                break;\n            }\n            case Direction.Left:{\n                newCol = (snakeEnds.head.col - 1) < 0 ? gridSize - 1 : snakeEnds.head.col - 1;\n                break;\n            }\n            default: throw(new Error('Invalid head direction!'));\n        }\n        ends.head.row = newRow;\n        ends.head.col = newCol;\n\n        grid[newRow][newCol] = 's'; // assign new head\n        grid[snakeEnds.tail.row][snakeEnds.tail.col] = 'b'; //clear current tail\n\n        newCol = snakeEnds.tail.col;\n        newRow = snakeEnds.tail.row;\n\n        switch(currentTailDir){\n            case Direction.Up: {\n                newRow = (snakeEnds.tail.row - 1) < 0 ? gridSize - 1 : snakeEnds.tail.row - 1;\n                break;\n            }\n            case Direction.Down:{\n                newRow = (snakeEnds.tail.row + 1) >= gridSize ? 0 : snakeEnds.tail.row + 1;\n                break;\n            }\n            case Direction.Right:{\n                newCol = (snakeEnds.tail.col + 1) >= gridSize ? 0 : snakeEnds.tail.col + 1;\n                break;\n            }\n            case Direction.Left:{\n                newCol = (snakeEnds.tail.col - 1) < 0 ? gridSize - 1 : snakeEnds.tail.col - 1;\n                break;\n            }\n            default: throw(new Error('Invalid tail direction!'));\n        }\n\n        ends.tail.row = newRow;\n        ends.tail.col = newCol;\n\n        return ends;\n    }\n\n    const onTick = () => {\n        let ends = {...snakeEnds};\n        console.log('head = ', ends.head, 'tail = ', ends.tail);\n        setSnakeEnds(getNewEnds(ends));\n    }\n\n    useInterval(\n        onTick,\n        // Delay in milliseconds or null to stop it\n        playing ? 2000 : null\n      );\n\n    const handleOnNewGame = useCallback(() => {\n        setPlaying(playing => !playing);\n    },[]);\n\n    console.log(\"grid rendering\");\n\n    return (\n        <div >\n            <div className={'gridContainer'}>\n                {grid.flat().map((box, index) => <Box className={box==='b'?'box':'snake'} id={index} key={index} />)}\n            </div>\n            <div className={'appUtils'}>\n                <Score currentScore={0}></Score>\n                <Button onClick={handleOnNewGame} label={playing?'Stop Game':'New Game'}/>\n            </div>  \n    </div>);\n}"]},"metadata":{},"sourceType":"module"}